function onSave()
    if not state.phase then return ''
    else return JSON.encode(state) end
end

function onLoad(saved_state)
    local f_guids = {GUIDs.Map}
    for _, guid in ipairs(GUIDs.Furniture) do table.insert(f_guids, guid) end
    for _, data in pairs(GUIDs.Nations) do
        table.insert(f_guids, data.resources)
        for _, guid in pairs(data.trays) do table.insert(f_guids, guid) end
        for _, guid in ipairs(data.territories) do table.insert(f_guids, guid) end
    end
    for _, guid in ipairs(f_guids) do getObjectFromGUID(guid).interactable = false end
    Map:initialize(getObjectFromGUID(GUIDs.Map))
    for label, guids in pairs(GUIDs.Battle) do Battle[label] = Battle(getObjectFromGUID(guids.board), label):initialize(guids) end
    Bags = {}
    for piece, guids in pairs(GUIDs.Bags) do
        if piece == 'units' then for unit, guid in pairs(guids) do Bags[unit] = getObjectFromGUID(guid) end
        elseif piece == 'stress' or piece == 'flags' then
            Bags[piece] = {}
            for i, guid in pairs(guids) do Bags[piece][i] = getObjectFromGUID(guid) end
        elseif piece == 'dice' then Bags.dice = Dice(getObjectFromGUID(guids))
        else Bags[piece] = getObjectFromGUID(guids) end
    end
    if saved_state == '' then
        state = {}
        UI.setXmlTable(HUD.XML:initial())
    else
        state = JSON.decode(saved_state)
        UI.setXmlTable(HUD.XML:scenario(state.scenario))
        Promise.condition(|| UI.getAttribute('help-button', 'image') ~= nil):next(loadState)
    end
end

function loadState()
    log('Loading saved state')
    Setup.initialize()
    log('Initialized map and morale board')
    -- Identify tokens, commands, construction stacks, cfighters, and hotspots
    for _, obj in ipairs(getAllObjects()) do
        local name, region = obj.getName():lower(), Map:getRegion(obj)
        region = region and Map.regions[region]
        if region then
            if name == 'hotspot' and not region.hotspot then region.hotspot = Hotspot(obj, region.id)
            elseif name:match('flag') then region.flag = obj
            elseif name == 'cfighter' and obj.script_state ~= '' then
                table.insert(Commands.cfighters, Command(obj, obj.script_state))
            elseif name:match('construction') then
                region.construction = Stack(obj):restoreUnits()
            elseif name == 'bomb_industry' and obj.is_face_down then
                if region.bombs then table.insert(region.bombs, obj) else region.bombs = {obj} end
            elseif obj.script_state == 'standing' then
                region.flag = Stack(obj)
                region.flag.nation = name:match('%b[](%w+)%b[]')
        end end
        if obj.name == 'Deck' then Cards.neutral = obj
        elseif obj.name == 'Card' then
            local card = Card(obj, name:match('^%b[](%a%d+)%b[]'))
            Cards[card.id] = card
            Map.regions[card.id].card = card
        else
            local nation, token, id = name:match('(%a+) (%a+) token')
            if nation and token then Tokens[token][nation] = obj end
            nation, id = name:match('^%b[](%a+)%b[] (%d+)%a+ %a+')
            if nation and id then
                Commands[nation] = Commands[nation] or {}
                Commands[nation][tonumber(id)] = Command(obj):restoreUnits():updateContextMenu()
                if #obj.getJoints() > 0 then
                    getObjectFromGUID(obj.getJoints()[1].joint_object_guid).interactable = false
    end end end end
    log('Initialized objects')
    Setup.initNations()
    Hotspot:initAssets()
    for i, nation in turnOrder() do
        UI.setAttributes('tracker' .. i, {image = nation, active = true})
        UI.show('status' .. i)
        for _, resource in ipairs{'oil', 'iron', 'osr'} do UI.show('frame-' .. resource .. i) end
    end
    UI.setAttributes('resources-button', {visibility = Vis.all, active = true})
    UI.setAttributes('resources', {visibility = Vis.none, active = true})
    Wait.condition(function ()
        if state.scenario == 'global' and not state.pact_broken then
            Orders.japan.UI.show('pact')
            Orders.ussr.UI.show('pact')
        end
        for _, nation in turnOrder() do
            local cards = Cards[nation]:sort()
            Cards[nation].first = cards[1]
            for i = 2, #cards do cards[i - 1].next, cards[i].prev = cards[i], cards[i - 1] end
            Cards[nation].origin = {position = cards[1].getPosition(), rotation = cards[1].getRotation():setAt('z', 0)}
        end
        Setup.zoneEvents()
        Round()
    end, function ()
        for _, orders in pairs(Orders) do if orders.UI.getXml() == '' then return false end end
        return true
    end)
end
