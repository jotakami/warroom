function onSave()
    if not state.phase then return ''
    else return JSON.encode(state) end
end

function onLoad(saved_state)
    local f_guids = {GUIDs.Map}
    for _, guid in ipairs(GUIDs.Furniture) do table.insert(f_guids, guid) end
    for _, data in pairs(GUIDs.Nations) do
        table.insert(f_guids, data.resources)
        for _, guid in pairs(data.trays) do table.insert(f_guids, guid) end
        for _, guid in ipairs(data.territories) do table.insert(f_guids, guid) end
        if #getObjectFromGUID(data.components).getObjects() == 0 then table.insert(f_guids, data.components) end
    end
    for _, guid in ipairs(f_guids) do getObjectFromGUID(guid).interactable = false end
    Hotspot:initAssets()
    for label, guids in pairs(GUIDs.Battle) do Battle[label] = Battle(getObjectFromGUID(guids.board), label):initialize(guids) end
    Bags = {}
    for piece, guids in pairs(GUIDs.Bags) do
        if piece == 'units' then for unit, guid in pairs(guids) do Bags[unit] = getObjectFromGUID(guid) end
        elseif piece == 'stress' or piece == 'flags' then
            Bags[piece] = {}
            for i, guid in pairs(guids) do Bags[piece][i] = getObjectFromGUID(guid) end
        elseif piece == 'dice' then Bags.dice = Dice(getObjectFromGUID(guids))
        else Bags[piece] = getObjectFromGUID(guids) end
    end
    if saved_state == '' then
        state = {}
        UI.setXmlTable(HUD.XML:initial())
    else
        state = JSON.decode(saved_state)
        UI.setXmlTable(HUD.XML:scenario(state.scenario))
        HUD.loaded():next(loadState)
    end
end

function loadState()
    Setup.initialize()
    -- Identify tokens, commands, construction stacks, cfighters, and hotspots
    for _, obj in ipairs(getAllObjects()) do
        local name, region = obj.getName():lower(), Map:getRegion(obj)
        region = region and Map.regions[region]
        if #name > 0 and region then
            if name == 'hotspot' then
                local hotspot = Hotspot(obj, region.id)
                Map.regions[hotspot.region].hotspot = hotspot
            elseif name:match('flag') then region.flag = obj
            elseif name == 'cfighter' and obj.memo ~= '' then
                table.insert(Commands.cfighters, Command(obj, obj.memo))
            elseif name:match('construction') then
                region.construction = Construction(obj):restoreUnits()
            elseif name == 'bomb_industry' and obj.is_face_down then
                if region.bombs then table.insert(region.bombs, obj) else region.bombs = {obj} end
            elseif name:match('standing army') then
                region.flag, Commands.standing[region.id] = obj, Standing(obj)
        end end
        if obj.name == 'Deck' then Cards.neutral = obj
        elseif obj.name == 'Card' then
            local card = Card(obj, name:match('^%b[](%a%d+)%b[]'))
            Cards[card.id] = card
            Map.regions[card.id].card = card
        else
            local nation, token, id = name:match('(%a+) (%a+) token')
            if nation and token then Tokens[token][nation] = obj end
            nation, id = name:match('^%b[](%a+)%b[] (%d+)%a+ %a+')
            if nation and id then
                Commands[nation] = Commands[nation] or {}
                Commands[nation][tonumber(id)] = Command(obj):restoreUnits():updateContextMenu()
                if #obj.getJoints() > 0 then
                    getObjectFromGUID(obj.getJoints()[1].joint_object_guid).interactable = false
    end end end end
    for id, region in pairs(Map.regions) do if not id:match('^n') and not Tokens.turn[Nations[id:sub(1, 1)]] then
        region.collapsed = true
    end end
    Setup.initNations()
    for i, nation in turnOrder() do
        UI.setAttributes('tracker' .. i, {image = nation, active = true})
        UI.show('status' .. i)
        for resource in Resources() do UI.show('frame-' .. resource .. i) end
    end
    Orders:loaded():next(function ()
        if state.scenario == 'global' and not state.pact_broken then
            Orders.japan.UI.show('pact')
            Orders.ussr.UI.show('pact')
        end
        for nation, _ in pairs(Orders) do
            Resources[nation]:loaded()
            local cards = Cards[nation]:sort()
            Cards[nation].first = cards[1]
            for i = 2, #cards do cards[i - 1].next, cards[i].prev = cards[i], cards[i - 1] end
            if cards[1] then Cards[nation].origin = {
                position = cards[1].getPosition(), rotation = cards[1].getRotation():setAt('z', 0)
            } end
        end
        Setup.zoneEvents()
        Round()
    end)
end
