function onSave()
    return JSON.encode(state)
end

function onLoad(saved_state)
    Nation = self.getName():match('^(%a+)%s'):lower()
    Orders = getObjectFromGUID(Global.getTable('GUIDs').Nations[Nation].orders)
    PegBag = getObjectFromGUID(Global.getTable('GUIDs').Bags.Pegs)
    Pegs = {}
    if saved_state ~= '' then
        --state = JSON.decode(saved_state)
        state = {
            iron = 0, iron_more = 0,
            osr = 0, osr_more = 0
        }
        if Nation ~= 'china' then state.oil = 0 state.oil_more = 0 end
    else
        state = {
            iron = 0, iron_more = 0,
            osr = 0, osr_more = 0
        }
        if Nation ~= 'china' then state.oil, state.oil_more = 0, 0 end
    end
    loaded = true
end

function onCollisionEnter(collision_info)
    if not loaded then return end
    local peg = collision_info.collision_object
    local resource, value
    for i, snap in ipairs(self.getSnapPoints()) do
        if distance3d(self.positionToLocal(collision_info.contact_points[1]), snap.position) < 0.005 then
            if i < 22 then if Nation ~= 'china' then resource, value = 'oil', i - 1 end
            elseif i < 43 then resource, value = 'iron', i - 22
            else resource, value = 'osr', i - 43 end
            break
        end
    end
    if peg.getName() == resource then
        state[resource] = value
        Pegs[resource] = peg
    elseif peg.getName() == 'more' then
        state[resource .. '_more'] = value
        Pegs[resource .. '_more'] = peg
    end
    Orders.call('updateResources', totals())
end

function onCollisionExit(collision_info)
    if not loaded then return end
    for spot, peg in pairs(Pegs) do
        if peg and collision_info.collision_object.getGUID() == peg.getGUID() and #spot > 4 then
            state[spot] = 0
            Pegs[spot] = nil
            Orders.call('updateResources', totals())
            break
        end
    end
end

function addResources(data)
    if Nation == 'china' then data.oil = nil end
    for resource, value in pairs(data) do
        data[resource] = state[resource] + state[resource .. '_more'] + value
    end
    setResources(data)
end

function setResources(data)
    local current = totals()
    for resource, value in pairs(data) do
        local offset = {oil = 1, iron = 22, osr = 43}
        if current[resource] < 21 then if value < 21 then
            Pegs[resource].setPositionSmooth(pegPosition(offset[resource] + value))
        else
            Pegs[resource].setPositionSmooth(pegPosition(offset[resource] + 20))
            PegBag.takeObject({
                position = pegPosition(offset[resource] + value - 20),
                smooth = false
            })
        end end
    end
end

function totals()
    local resources = {
        iron = state.iron + state.iron_more,
        osr = state.osr + state.osr_more
    }
    if Nation ~= 'china' then resources.oil = state.oil + state.oil_more end
    return resources
end

function pegPosition(index)
    return self.positionToWorld(self.getSnapPoints()[index].position) + vector(0, 0.1, 0)
end

function distance3d(p1, p2)
    return ((p2[1] - p1[1])^2 + (p2[2] - p1[2])^2 + (p2[3] - p1[3])^2) ^ 0.5
end
