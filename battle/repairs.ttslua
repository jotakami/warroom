function makeRepairs()
    local count, units = getDamagedUnits()
    repairUnit = function (_, value)
        local guid, resource, stack_guid = value:match('^(%w+)-(%a+)-?(%w*)')
        local obj, stack = getObjectFromGUID(guid), stack_guid ~= '' and getObjectFromGUID(stack_guid) or nil
        _repairUnit(obj, units, resource, stack)
        Wait.condition(function () count = count - 1 end, || not obj.isSmoothMoving())
    end
    destroyUnit = function (_, guid)
        local obj = getObjectFromGUID(guid)
        _destroyUnit(units, obj)
        assignHit(obj, nil, function () count = count - 1 end)
    end
    Wait.condition(function ()
        repairUnit, destroyUnit = nil, nil
        removeCasualties()
        returnUnits()
        resetState()
    end, || count == 0)
end

function _repairUnit(obj, units, resource, stack)
    local nation, j = obj.getVar('nation'):match('%a+$')
    local Resources = getObjectFromGUID(Global.getTable('GUIDs').Nations[nation].resources)
    local totals = Resources.call('totals')
    for i, unit in ipairs(units[nation]) do if unit.getGUID() == obj.getGUID() then j = i
    elseif totals[resource] == 1 then unit.UI.hide(resource) end end
    clearRepair(obj, j, units[nation])
    if stack ~= nil then stackOn(obj, stack)
    else obj.setPositionSmooth(obj.getPosition():setAt('x',
        self.positionToWorld({ZoneParams[combatMode()].sides[Alliance[nation]].nations[nation], 0, 0}).x
    )) end
    Resources.call('addResources', {[resource] = -1})
end

function _destroyUnit(units, obj)
    local nation, j = obj.getVar('nation'):match('%a+$')
    for i, unit in ipairs(units[nation]) do if unit.getGUID() == obj.getGUID() then j = i end end
    clearRepair(obj, j, units[nation])
end

function clearRepair(obj, index, t)
    table.remove(t, index)
    obj.UI.setCustomAssets()
    obj.UI.setXml('')
    stopBlinker(obj)
end

function getDamagedUnits()
    local mode, count, units = combatMode(), 0, {}
    for side, unit_zones in pairs(Zones.units[mode]) do for unit, stances in pairs(unit_zones) do for stance, zone in pairs(stances) do
        local stacks, damaged, sustained, align = {}
        for _, obj in ipairs(zone.getObjects()) do
            align = getColumn(obj)
            if align == 'damaged' then damaged = obj
            elseif align == 'sustained' then sustained = obj
            elseif not stacks[align] or isAbove(obj, stacks[align]) then stacks[align] = obj end
        end
        if sustained then
            local nation = sustained.getVar('nation')
            if stacks[nation] then stackOn(sustained, stacks[nation])
            else sustained.setPositionSmooth(sustained.getPosition():setAt('x', self.positionToWorld({ZoneParams[mode].sides[side].nations[nation], 0, 0}).x)) end
            stacks[nation] = sustained
        end
        if damaged then
            local nation = damaged.getVar('nation'):match('%a+$')
            if checkPortAdvantage(side) and unit ~= 'fighter' and unit ~= 'bomber' then
                if stacks[nation] then stackOn(damaged, stacks[nation])
                else damaged.setPositionSmooth(damaged.getPosition():setAt('x', self.positionToWorld({ZoneParams[mode].sides[side].nations[nation], 0, 0}).x)) end
            else
                count = count + 1
                if not units[nation] then units[nation] = {} end
                table.insert(units[nation], damaged)
                createRepairButtons(damaged, side, stacks[nation])
    end end end end end
    return count, units
end

function createRepairButtons(obj, side, stackObj)
    local nation, resources = obj.getVar('nation'):match('%a+$'), {}
    local align, onClick = side ~= 'axis' and 'Left' or 'Right', self.getGUID() .. '/FUNC('.. obj.getGUID() .. ')'
    debug('Creating repair buttons for ', nation, ' ', obj.getName())
    obj.UI.setCustomAssets(RepairAssets)
    local panel = {tag = 'Panel', attributes = {
        position = '0 0 ' .. (obj.is_face_down and 2 or -29),
        rotation = '0 ' .. obj.getRotation().z .. ' ' .. obj.getRotation().y,
        width = '188', height = '112'
    }, children = {
        {tag = 'Image', attributes = {image = nation, height = 40, width = 40}},
        {tag = 'Button', attributes = {
            rectAlignment = 'Middle' .. (align == 'Left' and 'Right' or 'Left'), height = 50, width = 50,
            text = 'X', fontSize = 36, textColor = 'white', colors = 'black|#606060|#c00000|clear',
            onClick = onClick:gsub('FUNC', 'destroyUnit')
    }}}}
    if obj.getName() == 'cfighter' then panel.attributes.scale = '2 2' end
    local totals = getObjectFromGUID(Global.getTable('GUIDs').Nations[nation].resources).call('totals')
    for _, resource in ipairs{'oil', 'iron', 'osr'} do if (totals[resource] or 0) > 0 then table.insert(resources, resource) end end
    onClick = onClick:gsub('FUNC', 'repairUnit'):gsub('%)', '-RES)')
    if stackObj then onClick = onClick:gsub('%)', '-' .. stackObj.getGUID() .. ')') end
    if #resources > 1 then
        table.insert(panel.children, repairButtonXML(resources[1], onClick, 'Lower' .. align))
        table.insert(panel.children, repairButtonXML(resources[2], onClick, 'Upper' .. align))
        if #resources > 2 then
            table.insert(panel.children, repairButtonXML(resources[3], onClick, 'Middle' .. align, (align == 'Left' and -56 or 56) .. ' 0'))
    end else table.insert(panel.children, repairButtonXML(resources[1], onClick, 'Middle' .. align)) end
    obj.UI.setXmlTable({panel})
    setBlinker(obj)
end

function repairButtonXML(resource, onClick, align, offset)
    local xml = {tag = 'Button', attributes = {
        id = resource, height = 56, width = 56, rectAlignment = align,
        image = resource, highlightedSprite = resource .. '-hover', transition = 'SpriteSwap',
        onClick = onClick:gsub('RES', resource)
    }}
    if offset then xml.attributes.offsetXY = offset end
    return xml
end
