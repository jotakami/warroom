#include constants/nations
#include constants/stress
#include constants/costs
#include constants/guids
#include config
#include debug

function onLoad()
    state = {}
    Map = {obj = getObjectFromGUID(GUIDs.Map)}
    Map.position = Map.obj.getPosition()
    Map.rotation = Map.obj.getRotation()
    Map.snaps = Map.obj.getSnapPoints()
    Wait.condition(function () Map.data = Map.obj.getTable('MapData') end, || Map.obj.getVar('loaded') ~= nil)
    MoraleBoard = getObjectFromGUID(GUIDs.MoraleBoard)
    BattleBoards = {getObjectFromGUID(GUIDs.BattleBoards[1]), getObjectFromGUID(GUIDs.BattleBoards[2])}
    UnitQueues = {}
end

-- -- Status updates and phase control

function updateTracker(step, phase)
    if phase then UI.setValue('phase', phase) end
    UI.setValue('step', step)
end

function updateStatus(nation, value, color)
    local id = 'status' .. state.turn_order[nation]
    if color then UI.setAttribute(id, 'color', '#' .. color) end
    if value == true then UI.setValue(id, 'âœ“')
    elseif value then UI.setValue(id, value)
    else UI.setValue(id, '') end
end

function resetStatus()
    for _, nation in ipairs(state.turn_order) do updateStatus(nation, nil, Colors.white) end
end

function updateTurn(nation)
    if nation then UI.setAttributes('turn', {position = 156 + state.turn_order[nation] * 39 .. ' 19', active = true})
    else UI.hide('turn') end
end

-- Scenario selection, game setup and round setup
#include phases/setup

-- Phase 1: Direct National Economy

function resourceIncome()
    updateTracker('Tallying resource income', '1 - Direct National Economy')
    resetStatus()
    local delay = 0
    for _, nation in ipairs(state.turn_order) do
        local guids, totals = GUIDs.Nations[nation], {oil = 0, iron = 0, osr = 0}
        for _, card in ipairs(getObjectFromGUID(guids.card_zone).getObjects()) do
            local resources = Map.data.regions[card.getName():match('^%w+'):lower()].resources
            if resources then
                for resource, value in pairs(totals) do totals[resource] = value + (resources[resource] or 0) end
                if card.is_face_down then
                    if (resources.oil or 0) > 0 then totals.oil = totals.oil - 1
                    elseif (resources.iron or 0) > 0 then totals.iron = totals.iron - 1
                    elseif (resources.osr or 0) > 0 then totals.osr = totals.osr - 1 end
        end end end
        if totals.oil + totals.iron + totals.osr > 0 then
            Wait.time(function ()
                state.objects.resources[nation].call('addResources', totals)
                local msg = colorize(properName(nation), nation) .. ' gained '
                for resource, value in pairs(totals) do if value > 0 then
                    msg = msg .. colorize(value, resource) .. ' ' .. resource .. ', '
                end end
                broadcastToAll(msg:sub(1, -3))
                updateStatus(nation, true)
            end, delay)
            delay = delay + 0.5
    end end
    Wait.time(writeOrders, delay)
end

-- Phase 2: Strategic Planning
#include phases/planning

-- Phase 3: Movement Operations
#include phases/movement

-- Phase 4: Combat Operations
#include phases/combat

-- Phase 5: Refit and Deploy

-- -- Step 1: Land air commands

function landAirCommands()
    setAdvance('deploy', 'Deploy new units')
    updateTracker('Land air commands', '5 - Refit & Deploy')
    onObjectRandomize = nil
end

-- -- Step 2/3: Deploy units and reorganize commands

function deployUnits()
    setAdvance('morale', 'Morale')
    for _, stack in ipairs(state.objects.construction) do if stack ~= nil then
        local units = breakStack(stack)
        returnPiece(stack)
        for _, unit in ipairs(units) do unit.registerCollisions() end
    end end
    state.objects.construction = {}
    onObjectCollisionEnter = function (obj, collision_info)
        local command = collision_info.collision_object
        if isCommand(command.getName()) and #command.getChildren() < 9 then
            obj.unregisterCollisions()
            addToStack(obj, collision_info.collision_object)
    end end
end

-- Phase 6: Morale

function morale()
    setAdvance('production', 'Production')
    onObjectCollisionEnter = nil
    MoraleBoard.UI.show('convert-button')
end

-- -- Step 1: Convert casualties into stress

-- -- Step 2: Resolve medals and stress tokens

function updateStressZone(nation, delta)
    if type(nation) == 'table' then nation, delta = nation[1], nation[2] end
    debug('Updating stress zone for ', nation)
    local token = state.objects.homeland_tokens[nation]
    local pos, snap_index = Map.obj.positionToLocal(token.getPosition())
    for i, snap in ipairs(Map.snaps) do if pos == snap.position then snap_index = i + 7 * delta break end end
    token.setPositionSmooth(Map.obj.positionToWorld(Map.snaps[snap_index].position))
    token.setRotationSmooth(Map.snaps[snap_index].rotation + Map.rotation)
    local zone_index = math.floor((snap_index - 1) / 7)
    local zone_msg = '[' .. StressZones[zone_index].color .. ']' .. StressZones[zone_index].name .. ' Zone[-]'
    broadcastToAll(colorize(properName(nation), nation) .. ' has ' .. (delta > 0 and 'advanced' or 'recovered') .. ' to the ' .. zone_msg)
end

-- -- Step 3: Apply stress zone penalties

function getStressZone(nation)
    local angle = Map.obj.call('rotationToCenter', Map.obj.positionToLocal(state.objects.homeland_tokens[nation].getPosition()))
    if angle > 276.25 then return 6 else return math.floor((angle - 0.5) / 45) end
end

function applyStressPenalties()
    local waiting = {}
    for _, nation in ipairs(state.turn_order) do
        local zone = getStressZone(nation)
        waiting[nation] = 0
        if zone > 1 then
            civilUnrest(nation, waiting)
            if zone == 6 then massDesertions(nation, waiting) end
    end end
    function tookPenalty(_, nation) waiting[nation] = waiting[nation] - 1 end
    Wait.condition(function ()
        tookPenalty = nil
        production()
    end, function ()
        for _, count in pairs(waiting) do if count > 0 then return false end end
        return true
    end)
end

function civilUnrest(nation, waiting)
    local resources, total = state.objects.resources[nation], 0
    for _, value in pairs(resources.call('totals')) do total = total + value end
    if total > 0 then
        waiting[nation] = waiting[nation] + math.max(total, 3)
    end
end

function massDesertions(nation, waiting)
    local stress = MoraleBoard.call('getStress', {nation = nation})
    waiting[nation] = waiting[nation] + stress
    if stress > 0 then
        debug('Not implemented')
    end
end

-- (only blue zone and gray zone have immediate consequences)

-- Phase 7: Production
#include phases/production

-- Helper Functions --
#include stacks
#include dice
#include cards

function validateCommand(params)
    local command = state.objects.commands[params[1]][params[2]]
    return command ~= nil and getRegion(command) ~= nil
end

function validateRegion(params)
    local region = params[1]
    return Map.data.regions[region] ~= nil
end

function isCapital(region)
    for _, id in ipairs(Scenarios[state.scenario].capitals) do if id == region then return true end end
    return false
end

function isCommand(name)
    local force = commandForce(name)
    return force == 'army' or force == 'air' or force == 'fleet'
end

function commandNation(command)
    local name = command.getName()
    if name == 'cfighter' then return command.getVar('nation')
    else return name:lower():match('%b[](%a+)%b[]') end
end

function commandForce(name) return name:lower():match('^%b[]%a+%b[]%s%w+%s(%a+)') end

function getRegion(obj)
    if type(obj) == 'table' then obj = obj[1] end
    local pos = Map.obj.positionToLocal(obj.getPosition())
    return Map.obj.call('findRegion', {pos.x, pos.z})
end

function getCommands(region)
    debug('Getting commands for region ', region)
    local commands, side, force = {axis = {}, allies = {}}
    for nation, cmds in pairs(state.objects.commands) do
        side = Alliance[nation]
        for num, command in pairs(cmds) do if getRegion(command) == region then
            if num < 10 then force = 'fleet' elseif num < 20 then force = 'air' else force = 'army' end
            commands[side][force] = commands[side][force] or {}
            table.insert(commands[side][force], command)
    end end end
    for nation, cfighters in pairs(state.objects.cfighters) do
        for _, cfighter in ipairs(cfighters) do if cfighter ~= nil then
            if getRegion(cfighter) == region then
                side = Alliance[cfighter.getVar('nation')]
                commands[side].air = commands[side].air or {}
                table.insert(commands[side].air, cfighter)
    end end end end
    return commands
end

function getAllCommands()
    local commands, side, force, pos, region = {}
    for nation, cmds in pairs(state.objects.commands) do
        side = Alliance[nation]
        for num, command in pairs(cmds) do
            region = getRegion(command)
            if region then
                commands[region] = commands[region] or {axis = {}, allies = {}}
                if num < 10 then force = 'fleet' elseif num < 20 then force = 'air' else force = 'army' end
                commands[region][side][force] = commands[region][side][force] or {}
                table.insert(commands[region][side][force], command)
    end end end
    for nation, cfighters in pairs(state.objects.cfighters) do
        side = Alliance[nation]
        for _, cfighter in ipairs(cfighters) do if cfighter ~= nil then
            region = getRegion(cfighter)
            if region then
                commands[region] = commands[region] or {axis = {}, allies = {}}
                commands[region][side].air = commands[region][side].air or {}
                table.insert(commands[region][side].air, cfighter)
    end end end end
    return commands
end

function getNewCommand(nation, force)
    if type(nation) == 'table' then nation, force = nation.nation, nation.force end
    for id, command in pairs(state.objects.commands[nation]) do
        local pos = command.getPosition()
        if (math.abs(pos.x) > 45 or pos.z < -45) then
            if id < 10 then if force == 'fleet' then return command end
            elseif id < 20 then if force == 'air' then return command end
            elseif force == 'army' then return command end
    end end
end

function getOwnership(region)
    if state.objects.flags[region] ~= nil then
        local name = state.objects.flags[region].getName()
        if name:match('^Defense') then return name:match('%b[](%a+)%b[]'):lower()
        else return name:match('^%a+'):lower() end
    end
    return Prefixes[region:sub(1, 1)]
end

function onObjectRandomize(obj)
    local name = obj.getName()
    if name == 'arrow' or name == 'cfighter' or isCommand(name) and #obj.getAttachments() == 0 then returnPiece(obj) end
end

function returnPiece(obj)
    local name, callback = obj.getName(), || obj.destruct()
    local bag = GUIDs.Bags.Units[name] or GUIDs.Bags[name]
    if not bag then
        if name:find('flag') then bag = GUIDs.Nations[name:match('^%a+'):lower()].flag_bag
        else
            local tray = getObjectFromGUID(GUIDs.Nations[commandNation(obj)].trays[3 - math.min(math.floor(name:match('^%b[]%a+%b[]%s(%d+)') / 10), 2)])
            callback = || obj.setPositionSmooth(tray.getPosition() + vector(math.random() * 3 - 1.5, 1 + math.random() * 2, math.random() * 3 - 1.5))
    end end
    obj.setPositionSmooth(obj.getPosition() + vector(0, 3, 0))
    Wait.condition(callback, || not obj.isSmoothMoving())
end

function returnPieceGUID(data) returnPiece(getObjectFromGUID(data[1])) end

function destroyObjects(objs)
    for _, obj in ipairs(objs) do obj.destruct() end
end

function test()
    getObjectFromGUID('198655').call('resetSnaps')
end

function toggleDebug(_, value, id)
    Debug = value == 'True'
    UI.setAttribute(id, 'text', 'Debug log ' .. (Debug and 'ON' or 'OFF'))
end

function checkScenario(nation)
    return state.scenario == 'global' or Scenarios[state.scenario].nations[nation]
end

function setBlinker(obj, hcolor, on_time, delay)
    hcolor, on_time, delay = hcolor and colorTable(hcolor) or {1, 1, 1}, on_time or 0.5, delay or 1
    local id
    obj.highlightOn(hcolor, on_time)
    id = Wait.time(|| obj ~= nil and obj.highlightOn(hcolor, on_time) or Wait.stop(id), delay, -1)
    obj.setVar('blinker', id)
end

function stopBlinker(obj) if obj.getVar('blinker') then Wait.stop(obj.getVar('blinker')) end end

function isAxis(nation) return Alliance[nation] == 'axis' end

function regionPrefix(nation)
    return nation:gsub('uk', 'b'):gsub('ussr', 'r'):sub(1, 1):gsub('i', 't')
end

function properName(s)
    if type(s) == 'table' then s = s[1] end
    if s:match('[bcgjnrtu]%d+') then
        local name = Map.data.regions[s].name
        return colorize(s:upper(), Prefixes[s:sub(1, 1)]) .. ' - ' .. name
    elseif s:match('[aimp]%d+') then return colorize(s:sub(1, 1):upper() .. '-' .. s:sub(2, -1), 'sea')
    elseif #s < 5 then return s:upper()
    else return proper(s) end
end

function ordinalize(n)
    if type(n) == 'table' then n = n[1] end
    if n > 3 and n < 21 then return n .. 'th'
    elseif n % 10 == 1 then return n .. 'st'
    elseif n % 10 == 2 then return n .. 'nd'
    elseif n % 10 == 3 then return n .. 'rd'
    else return n .. 'th' end
end

function mapBFS(q, path, visit, v)
    local region, d, node
    if type(q) == 'table' then
        while not node or v[node[2]] do node = table.remove(q, 1) end
        d, region = node[1], node[2]
        visit(region, d, v)
        if v.result then return v.result end
    else d, region, q, v = 0, q, {}, {[q] = 'start'} end
    for _, target in ipairs(Map.data.regions[region].adjacent) do if path(target, d) then table.insert(q, {d + 1, target:match('%a%d+')}) end end
    return mapBFS(q, path, visit, v)
end

-- function setHomelandSnaps()
--     local map = getObjectFromGUID(GUIDs.Map)
--     local snaps, center = {}, map.getTable('MapData').center
--     for i = 1, 7 do
--         local theta, r = -129.25 - 14.5 * i, 1.47
--         if i > 1 and i < 7 then theta = theta - 0.25 end
--         if i > 2 and i < 6 then theta = theta - 1 end
--         table.insert(snaps, {
--             position = {center.x + r * math.sin(theta * math.pi / 180), center.y, center.z + r * math.cos(theta * math.pi / 180)},
--             rotation = {0, theta, 0},
--             rotation_snap = true
--         })
--     end
--     for i = 1, 6 do for j = 1, 7 do
--         local r = 1.325 + 0.225 * (math.floor(j / 3) - math.floor(j / 5))
--         local theta, tick, delta = 45 * i - 157 - math.max(i - 4, 0) ^ 2 * 2.5, 5.25 - math.floor(i / 5)
--         if j < 3 then delta = 2.4
--         elseif j < 5 then delta = 1
--         elseif j == 5 then delta = 0
--         else delta = 3 end
--         theta = theta + delta * tick * (j % 5 % 2 * 2 - 1)
--         table.insert(snaps, {
--             position = {center.x + r * math.sin(theta * math.pi / 180), center.y, center.z + r * math.cos(theta * math.pi / 180)},
--             rotation = {0, theta, 0},
--             rotation_snap = true
--         })
--     end end
--     map.setSnapPoints(snaps)
-- end
