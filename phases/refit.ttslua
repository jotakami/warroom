Refit = Phase()

function Refit:main()
    HUD.updateTracker('Land air commands', '5 - Refit & Deploy', 'landing')
    HUD.updateTurn()
    HUD.resetStatus()
    local readied, ps, deploy = {}, {}, {}
    if state.phase < 5 or state.step < 2 then
        state.phase, state.step = 5, 1
        HUD.close('combat')
        for _, cfighter in ipairs(Commands.cfighters) do if cfighter.obj.memo ~= nil then stash(cfighter) end end
        Commands.cfighters = {}
        debug('Removed remaining carrier fighters')
        for command in Commands:all() do if command.force == 'fleet' and #command.getJoints() > 0 then
            debug('Removing dive token from ', command.nation, ' ', command.id)
            stash(getObjectFromGUID(command.getJoints()[1].joint_object_guid))
            command.jointTo()
            command.removeTag('escaped')
        elseif command.force == 'air' then
            if #command.getJoints() > 0 then
                debug('Removing arrow tag from ', command.nation, ' ', command.id)
                stash(getObjectFromGUID(command.getJoints()[1].joint_object_guid))
                command.jointTo()
                command.addTag('landing')
            end
            if command.hasTag('landing') then
                readied[command.nation] = false
                setGlow(command, Color[command.nation])
        end end end
        for _, nation in turnOrder() do if readied[nation] == false then
            HUD.updateStatus(nation, false)
            Orders[nation]:enableReady(|...| self.resume(...))
        else HUD.updateStatus(nation, true) end end
        Phase.readyLoop(readied, next(readied) == nil, function (nation, ready)
            local invalid
            for _, command in pairs(Commands[nation]) do if command.hasTag('landing') then if ready then
                if not command:region() then command.removeTag('landing') else
                    local dest = Map.regions[command:region()]
                    debug(command.nation, ' ', command.id, ' lands in ', dest.id)
                    if dest.is_sea or dest:side() ~= 'neutral' and dest:side() ~= Nations[command.nation].side
                            or dest:side() == 'neutral' and (Nations[command.nation]:isAxis() or not dest.allied) then
                        invalid = true
                        setPulse(command, Color.red)
                        Wait.time(|| stopPulse(command), 6)
                end end
                stopGlow(command)
            else setGlow(command, Color[nation]) end end end
            if invalid then return false end
        end)
    end
    for command in Commands:all() do command.removeTag('landing') end
    HUD.updateTracker('Deploy units and reorganize commands', nil, 'deploy')
    HUD.resetStatus()
    state.step, readied = 2, {}
    for _, nation in turnOrder() do
        readied[nation], deploy[nation] = false, {}
        HUD.updateStatus(nation, false)
        Orders[nation]:enableReady(|...| self.resume(...))
    end
    for id, region in pairs(Map.regions) do if region.construction ~= nil then
        local owner, p = region:owner(), Promise()
        coroutine.resume(coroutine.create(|| self:deployUnits(region):next(p)))
        table.insert(deploy[owner], p:next(function (units) deploy[owner][id] = units end))
    end end
    for _, nation in turnOrder() do debug('Checking for deployable ', nation, ' units') if #deploy[nation] > 0 then
        Orders[nation].UI.setAttribute('ready', 'interactable', false)
        Promise.all(deploy[nation]):next(function ()
            Orders[nation].UI.setAttribute('ready', 'interactable', true)
            for i = #deploy[nation], 1, -1 do deploy[nation][i] = nil end
    end) end end
    Phase.readyLoop(readied, next(readied) == nil, function (nation, ready) if ready then
        local ps = {}
        for id, units in pairs(deploy[nation]) do
            for i = #units, 1, -1 do if units[i].obj == nil then table.remove(units, i) end end
            local fails = {}
            while #units > 0 do
                local stack, fail = {table.remove(units)}
                local pos, force = stack[1].getPosition():setAt('y', 0), stack[1].force
                if force == 'fleet' then
                    local deploy_id = Map:getRegion(stack[1])
                    fail = string.format('Can\'t deploy fleet from %s to %s', id, deploy_id)
                    for _, port in ipairs(Map.regions[id].adjacent) do
                        if deploy_id .. '$' == port then fail = nil break end
                end end
                for i = #units, 1, -1 do if (units[i].getPosition():setAt('y', 0) - pos):magnitude() < 0.25 then
                    if units[i].force ~= force then fail = 'Can\'t form command with different unit types' end
                    table.insert(stack, table.remove(units, i))
                end end
                if fail then
                    for i = 1, #stack do table.insert(fails, stack[i]) end
                    table.insert(ps, Promise():reject(fail))
                else table.insert(ps, Commands:getNew(
                    nation, force, pos:setAt('y', #stack * 0.21 + 7), stack[1].getRotation()
                ):next(|c| Promise.condition(|| c.resting, c)):next(
                    |c| c:form(nil, table.pack(c, table.unpack(stack, 1, #stack)))
                ):catch(function (reason)
                    for _, unit in ipairs(stack) do table.insert(deploy[nation][id], unit) end
                    return Promise():reject(reason)
                end))
            end end
            if #fails > 0 then deploy[nation][id] = fails end
        end
        if #ps > 0 then Promise.all(ps):next(|| self.resume(nation, ready), || Orders[nation]:toggleReady(false)) end
    end end)
    self.resume = nil
end

function Refit:deployUnits(region)
    debug('Deploying units in ', region.id)
    local stack, co = region.construction, coroutine.running()
    if region:production() == 0 then
        debug('No production capacity! Destroying all constructed units')
        return Promise.all(Morale:casualties(stack:detach()), stack:stash())
    elseif stack.units() > region:production() then
        debug('Over production capacity! Select units to destroy')
        setGlow(stack, Color.red)
        repeat
            for unit in pairs(stack.units) do stack.addContextMenuItem('Destroy 1 ' .. unit:proper(), function ()
                stack.clearContextMenu()
                stack:destroyUnit(unit):next(|| coroutine.resume(co))
            end) end
            coroutine.yield()
        until stack.units() == region:production()
    end
    local units = stack:detach()
    for _, unit in ipairs(units) do setGlow(unit, Color[region:owner()]) end
    return stack:stash():next(|| units)
end
