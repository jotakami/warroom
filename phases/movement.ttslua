Movement = Phase()

function Movement:main()
    if state.phase < 3 then
        state.phase, state.step = 3, 0
        for _, region in pairs(Map.regions) do if region.hotspot then
            region.hotspot.flip()
            region.hotspot.setTags({'active'})
        end end
        Commands:verifyStacks():delay(1):next(|| self.resume())
        coroutine.yield()
    end
    if state.phase == 3 then
        HUD.updateTracker('Resolve movement orders', '3 - Movement Operations', 'movement')
        if state.step < #turnOrder.get() * 10 then
            debug('Step is less than 70, showing movement confirmation panels')
            UI.show('movement')
            UI.show('orders-highlight')
        end
        for i = 1, 7 do for j = 1, 9 do UI.setAttribute('order' .. i .. j, 'active', false) end end
        HUD.open('orders')
    end
    for i, nation in turnOrder() do if state.phase == 3 and state.step < i * 10 then
        Orders[nation]:resolveMovement(state.step % 10)
        state.step = i * 10
    else Orders[nation]:resolveMovement(9) end end
    UI.hide('movement')
    UI.hide('confirm-panel')
    UI.hide('cancel-panel')
    UI.hide('orders-highlight')
    if state.phase == 3 then self:deployCarrierFighters() end
    self.resume = nil
end

function Movement:evaluateMove(nation, command, target)
    local is_axis, paths, partial_pin = Nations[nation]:isAxis(), {}
    if command.memo == 'landing' or command.memo == nil then return 'invalid' end
    local region = Map.regions[command.memo]
    debug('Checking for valid path from ', region.id, ' to ', target.id)
    if command.id < 10 then paths = self:fleetMovement(nation, region, target)
    elseif command.id < 20 then paths = self:airMovement(nation, region, target)
    else paths = self:armyMovement(nation, region, target) end
    debug('Found ', #paths, ' valid path(s)')
    if #paths == 0 then return 'invalid' end
    if command.id < 10 then
        local free = self.netPin(nation, region:commands(), 'fleet')
        if free <= 0 then return 'pinned' elseif free < command.units() then partial_pin = true end
    elseif command.id > 19 then
        if not region.is_sea then
            local free = self.netPin(nation, region:commands(), 'army')
            if free <= 0 then return 'pinned' elseif free < command.units() then partial_pin = true end
        elseif target.is_sea or Nations[nation].side ~= Nations[target:owner()].side then
            if self.netPin(nation, region:commands(), 'fleet') < 0 then return 'pinned' end
    end end
    if not state.pact_broken and command.id > 9 then
        local ally, other, has_path = is_axis and 'japan' or 'ussr', is_axis and 'ussr' or 'japan', false
        for _, path in ipairs(paths) do
            local blocked = false
            for _, waypoint in ipairs(path) do blocked = blocked or Map.regions[waypoint]:owner() == other end
            has_path = has_path or not blocked
        end
        if not has_path and (nation == ally or region:owner() == ally) then return 'pact' end
    end
    if target:owner() == 'neutral' and command.id > 19 and (is_axis or not target.allied) then return 'neutral' end
    if partial_pin then return 'partial' end
end

function Movement:fleetMovement(nation, region, target, escaped)
    debug('Checking fleet pathing')
    return Map:search(region.id, |_, to| Map.regions[to:match('%a%d+')].is_sea ~= nil, function (d, from, to, v)
        local id, flag = to:match('(%a%d+)(.?)')
        if flag == '@' and not self.canalCheck(nation, from, id) then return false end
        if id == target.id then table.insert(v.result, d == 1 and {id} or {from, id}) end
        return d < 2
    end, {})
end

function Movement.canalCheck(nation, from, to)
    for _, region in ipairs(Map.regions[from].canals[to]) do
        local owner = Map.regions[region]:owner()
        if owner == 'neutral' then if Nations[nation]:isAxis() or not Map.regions[region].allied then return false end
        elseif Nations[owner].side ~= Nations[nation].side then return false end
    end
    return true
end

function Movement:airMovement(nation, region, target)
    debug('Checking air pathing')
    return Map:search(region.id, |d, to| d == 0 or not to:match('%^'), function (d, from, to, v)
        local id, flag = to:match('(%a%d+)(.?)')
        if d == 1 and id == target.id then table.insert(v.result, {id})
        elseif d == 2 and id == target.id then table.insert(v.result, {from, id}) end
        if d > 1 or flag == '^' then return false else return true end
    end, {})
end

function Movement:armyMovement(nation, region, target)
    debug('Checking army pathing')
    local rail_status = {}
    for _, nation in turnOrder() do rail_status[nation] = Morale.stressZone(nation) < 3 end
    local rail_ok = not region.is_sea and self.railCheck(nation, region.id, rail_status)
    debug('Rail movement', rail_ok and ' ' or ' in', 'eligible')
    return Map:search(region.id, function (d, to)
        local flag = to:match('%a%d+(.?)')
        if flag == '^' then return false else return flag == '#' or d < 2 end
    end, function (d, from, to, v)
        local id, flag = to:match('(%a%d+)(.?)')
        local from_sea, to_sea = Map.regions[from].is_sea, Map.regions[id].is_sea
        if v[id] then return false
        elseif from_sea and d == 1 then
            if id == target.id then table.insert(v.result, {id}) end
            return to_sea
        elseif from_sea then if to_sea and id == target.id then table.insert(v.result, {from, id}) end
    elseif to_sea and d == 1 or rail_ok and flag == '#' and not v[target.id] and self.railCheck(nation, id, rail_status) then
            if id == target.id then table.insert(v.result, {id}) else v[id] = true end
            return id ~= target.id
        elseif id == target.id and d == 1 then
            table.insert(v.result, {id})
            v[id] = true
        end
        return false
    end, {})
end

function Movement.railCheck(nation, region, status)
    region = Map.regions[region]
    return Nations[nation].side == Nations[region:owner()].side
        and status[nation] and Commands:region(region.id)[Nations[nation].other].army == nil
end

function Movement.netPin(nation, commands, force)
    debug('Checking for ', force, ' pinning')
    local totals, is_axis = {axis = 0, allies = 0, japan = 0, ussr = 0}, Nations[nation]:isAxis()
    for side, forces in pairs(commands) do for _, command in ipairs(forces[force] or {}) do
        local n, count = command.nation, command.units()
        if not state.pact_broken and n == 'japan' then totals.japan = totals.japan + count
        elseif not state.pact_broken and n == 'ussr' then totals.ussr = totals.ussr + count
        else totals[side] = totals[side] + count end
    end end
    debug('Unit counts: axis ', totals.axis, ', allies ', totals.allies, ', japan ', totals.japan, ', ussr ', totals.ussr)
    if state.pact_broken or nation == 'japan' or nation == 'ussr' then
        return (totals[nation] or 0) + (totals.allies - totals.axis) * (is_axis and -1 or 1)
    elseif is_axis then return math.min(totals.japan - totals.allies, 0) + totals.axis - totals.ussr
    else return math.min(totals.ussr - totals.axis, 0) + totals.allies - totals.japan end
end

function Movement.breakPact(nation)
    if not state.pact_broken then if nation then
        state.pact_broken = Nations[nation]:isAxis() and 'japan' or 'ussr'
        Morale:addStress(state.pact_broken, 6)
        broadcastToAll(Nations[state.pact_broken]:colorized() .. ' has broken the Soviet-Japanese Non-Aggression Pact! (+6 stress)')
    else
        state.pact_broken = true
        broadcastToAll('The Soviet-Japanese Non-Aggression Pact is no longer in force!')
    end end
    Orders.japan.UI.hide('pact')
    Orders.ussr.UI.hide('pact')
end

function Movement.invadeNeutral(invader, region)
    debug('Neutral ', region.id, ' was invaded by ', invader)
    local commands, other, min, defender = Commands:byRegion(), Nations[invader].other
    for _, nation in ipairs(Map:search(region.id, |_, to| to:match('%a%d+(.?)') ~= '^', function (d, _, to, v)
        local id = to:match('%a%d+')
        if v[id] or v.d and d > v.d then return false else v[id] = true end
        debug('Checking commands in ', id)
        if commands[id] then for _, command in ipairs(commands[id][other].army or {}) do
            local nation = command.nation
            if state.pact_broken or (invader ~= 'japan' or nation ~= 'ussr') and (invader ~= 'ussr' or nation ~= 'japan') then
                table.insert(v.result, nation)
                v.d = d
        end end end
        return true
    end, {})) do if turnOrder[nation] < (min or 8) then defender, min = nation, turnOrder[nation] end end
    debug(defender, ' assumes control of ', region.id)
    broadcastToAll(string.format('%s invades %s!\n%s has assumed control of the defense forces',
        Nations[invader]:colorized(), region:colorizedName(), Nations[defender]:colorized()))
    Morale:addStress(invader, 1)
    local card_p, units_p, flag_p = Promise(), Promise(), Promise()
    local deck = Cards.neutral
    for _, card in ipairs(deck.getObjects()) do if card.name:find(region:displayID()) then deck.takeObject({
        index = card.index, position = deck.getPosition() + vector(0, 3, 0),
        callback_function = function (obj)
            region.card = Card(obj, region.id)
            Cards[region.id] = region.card
            region.card:giveTo(defender):next(card_p)
    end}) break end end
    local pos = Map.positionToWorld((region.centroid or region.circle.c):copy():setAt('y', 0.6))
    if region.army then Units:buildStack(region.army, pos):next(function (...)
        pos = pos + vector(0, 0.21 * #{...}, 0)
        units_p:resolve(...)
    end) else units_p:resolve() end
    units_p:next(function (...)
        local units = {...}
        Bags.flags[defender].takeObject({position = pos, callback_function = function (obj)
            region.flag = obj
            if #units == 0 then flag_p:resolve() else
                local army = Standing(region.flag, true)
                Commands.standing[region.id] = army
                army:attach(units):next(flag_p)
    end end}) end)
    return Promise.all(card_p, flag_p)
end

function Movement:deployCarrierFighters()
    HUD.updateTracker('Carrier fighter movement', nil, 'cfighters')
    local readied = {}
    if state.step == #turnOrder.get() * 10 then
        for nation, commands in pairs(Commands) do for i = 1, 9 do
            if not commands[i] then break elseif commands[i].units.carrier > 0 then
                local rotation, bump = commands[i].getRotation(), 0
                if Nations[nation]:isAxis() then rotation, bump = rotation + vector(0, 0, 180), 0.22 end
                readied[nation] = false
                for j = 1, commands[i].units.carrier do
                    Wait.frames(|| self.resume(), 3)
                    coroutine.yield()
                    Bags.cfighter.takeObject({
                        position = commands[i].getPosition() + vector(0, j * 0.25 + bump, 0),
                        rotation = rotation,
                        callback_function = function (obj)
                            setGlow(obj, Color[nation])
                            obj.memo = nation
                            table.insert(Commands.cfighters, Command(obj, nation))
        end}) end end end end
        state.step = state.step + 1
    else for _, cfighter in ipairs(Commands.cfighters) do
        readied[cfighter.nation] = false
        setGlow(cfighter, Color[cfighter.nation])
    end end
    for _, nation in turnOrder() do if readied[nation] == false then
        HUD.updateStatus(nation, false)
        Orders[nation]:enableReady(|...| self.resume(...))
    else HUD.updateStatus(nation, true) end end
    Phase.readyLoop(readied, next(readied) == nil, function (nation, ready)
        for _, cfighter in ipairs(Commands.cfighters) do if cfighter.nation == nation then
            if ready then stopGlow(cfighter) else setGlow(cfighter, Color[nation]) end
    end end end)
end
