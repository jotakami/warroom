Combat.Battle = Combat.Action()

function Combat.Battle:main(commands)
    local region, board = Map.regions[self.hotspot.region]
    local mode = region.is_sea and 'sea' or 'land'
    setGlow(self.hotspot, Color.red)
    repeat
        if not rawget(Battle.left, 'combat') then board = Battle.left end
        if not rawget(Battle.right, 'combat') and (not board or Battle.right:mode() == mode) then board = Battle.right end
        if board == nil then
            table.insert(state.battle_queue, region.id)
            coroutine.yield()
        end
    until board ~= nil
    board:initializeCombat(self)
    local aux_data, initiative, i = board:placeUnits(commands), {}, 0
    Commands.standing[region.id] = nil
    board:setAdvantages()
    for side, forces in pairs(commands) do
        initiative[side] = 0
        for force, commands in pairs(forces) do for _, command in ipairs(commands) do
            initiative[side] = math.max(initiative[side], turnOrder[command.nation])
    end end end
    initiative = initiative.axis > initiative.allies and 'allies' or 'axis'
    debug(initiative .. ' has initiative')
    for _, side in ipairs{initiative, Nations.other[initiative]} do
        board.UI.setAttributes(side .. '-confirm', {text = 'Ready', textColor = 'white'})
        board.UI.show(side .. '-confirm-panel')
        debug('Waiting for ready button...')
        local glow = Wait.time(function ()
            local tint = Color.black:lerp(color(0.4, 0.4, 0.4), (i < 10 and i or 20 - i) / 10)
            i = (i + 1) % 20
            board.UI.setAttribute(side .. '-confirm-panel', 'color', tint:toXml(false))
        end, 0.08, -1)
        board:lockStances(coroutine.yield())
        board.UI.setAttribute(side .. '-confirm', 'interactable', false)
        Wait.stop(glow)
        board.UI.setAttribute(side .. '-confirm-panel', 'color', '#404040')
    end
    board:stage('air', initiative)
    board.zones_active = false
    if mode == 'land' then
        board:stage('bomb', initiative)
        board:stage('ground', initiative)
    else board:stage('surface', initiative) end
    board:repairs()
    Promise.all(board:replaceCommands(), board:losses()):next(function (data)
        local commands, extras = data.forces, data.extras
        stopGlow(self.hotspot)
        if mode == 'sea' and aux_data then for side, force in pairs(aux_data) do
            commands[side].army = force
        end end
        if not extras then self.resume(commands) else
            if mode == 'sea' then
                for _, unit in ipairs(extras) do
                    unit.addContextMenuItem('Form dived command', || self.diveSub(region, unit, extras))
                end
                Wait.condition(|| self.resume(commands), function ()
                    for i = #extras, 1, -1 do if extras[i].obj == nil then table.remove(extras, i) end end
                    return #extras == 0
                end)
            else
                region.flag.setPositionSmooth(region.flag.getPosition() + vector(0, #extras * 0.21, 0))
                Promise.condition(|| not region.flag.isSmoothMoving()):next(function ()
                    local army = Standing(region.flag)
                    Commands.standing[region.id] = army
                    return army:attach(extras)
                end):next(|| self.resume(Commands:region(region.id)))
    end end end)
    board:reset()
    Wait.condition(function () if #state.battle_queue > 0 then
        Map.regions[table.remove(state.battle_queue, 1)].hotspot.resume()
    end end, || board.UI.getAttribute('status-panel', 'active') == 'false')
    self:debrief(coroutine.yield(), mode == 'land' and aux_data or nil)
end

function Combat.Battle.diveSub(source, sub, subs)
    local dest = Map.regions[Map:getRegion(sub)]
    if source.id ~= dest.id then for _, adj in ipairs(source.adjacent) do
        if adj:match(dest.id) and (adj:sub(-1) ~= '@' or Movement.canalCheck(nation, source.id, dest.id)) then
            local units = {}
            for i = #subs, 1, -1 do if subs[i].obj == nil then table.remove(subs, i)
            elseif subs[i].nation == sub.nation and Map:getRegion(subs[i]) == dest.id then
                subs[i].removeTag('escaped')
                table.insert(units, subs[i])
            end end
            local pos, rot = sub.getPosition() + vector(0, #units * 0.21, 0), sub.getRotation()
            local command_p, dive_p = Commands:getNew(sub.nation, 'fleet', pos, rot), Promise()
            Bags.convoy_dive.takeObject({
                position = pos + vector(0, 0.42, 0), rotation = rot:setAt('z', 180),
                callback_function = |obj| dive_p:resolve(obj)
            })
            Promise.all(command_p, dive_p):skip(10):next(function (command, token)
                command.jointTo(token, {type = 'Fixed'})
                token.interactable = false
                command:attach(units)
            end)
    end end end
end
