-- -- -- Convoy raids

function resolveRaid(hotspot)
    local region = getRegion(hotspot)
    local commands, raiders, clusters, targets = getCommands(region), {}, {}, {}
    local axis = commands.axis.fleet or commands.axis.air
    debug('Resolving ', axis and 'axis' or 'allies', ' convoy raid in region ', region)
    for force, objs in pairs(commands[axis and 'axis' or 'allies']) do if force ~= 'army' then
        for _, obj in ipairs(objs) do table.insert(raiders, obj) end
    end end
    debug('Raid involves ', #raiders, ' commands')
    for _, cluster in ipairs(activeConvoys(region)[axis and 'allies' or 'axis']) do
        local resources = {}
        for origin, values in pairs(cluster) do
            local owner = getOwnership(origin:match('^%w%d+'))
            if origin:find('-') then for _, resource in ipairs{'oil', 'iron', 'osr'} do
                if values[resource] then resources[resource] = {[owner] = values[resource]} end
            end else for _, resource in ipairs{'oil', 'iron', 'osr'} do if values[resource] then
                local loss = math.min(lossLimit(origin)[resource] or 0, values[resource])
                if loss > 0 then
                    resources[resource] = resources[resource] or {}
                    resources[resource][owner] = (resources[resource][owner] or 0) + loss
            end end end end
            table.insert(targets, {position = Map.obj.positionToWorld({values.x, 0.6, values.z}), cluster = #clusters + 1})
        end
        table.insert(clusters, {resources = resources, raiders = {}})
    end
    debug('Raid involves ', #clusters, ' convoy clusters')
    if #clusters > 1 then
        local pids = {}
        for _, raider in ipairs(raiders) do updateRaidTarget(raider, pids, function (command)
            setRaidTarget(command, targets, clusters)
            debug('Updated raid target for ', command.getGUID())
        end, function (command)
            command.setVectorLines()
            debug('Command ', command.getGUID(), ' was moved, clearing target line')
        end) end
        hotspot.setVar('raid', true)
        self.setVar('raid' .. region, function ()
            debug('Confirming convoy raid in ', region)
            self.setVar('raid' .. region, nil)
            for _, pid in pairs(pids) do Wait.stop(pid) end
            rollRaid(hotspot, commands, clusters)
        end)
    else
        clusters[1].raiders = raiders
        rollRaid(hotspot, commands, clusters)
    end
end

function updateRaidTarget(command, pids, set_fun, clear_fun)
    local condition, callback
    if command.getVectorLines() then func, condition = clear_fun, || not command.resting
    else func, condition = set_fun, || command.resting end
    pids[command.getGUID()] = Wait.condition(function ()
        func(command)
        updateRaidTarget(command, pids, set_fun, clear_fun)
    end, condition)
end

function setRaidTarget(command, targets, clusters)
    debug('Updating raid target for ', command.getGUID())
    local pos, distance, target = command.getPosition(), 1000
    for _, t in ipairs(targets) do debug('Checking target at ', t.position) if pos:distance(t.position) < distance then
        distance, target = pos:distance(t.position), t
    end end
    command.setVectorLines({{
        points = {vector(0, 0, 0), command.positionToLocal(target.position)},
        color = {0.9, 0.5, 0.2}, thickness = 0.1
    }})
    local moved = true
    debug('Checking if command changed targets')
    for i, cluster in ipairs(clusters) do
        for j, raider in ipairs(cluster.raiders) do
            if raider.getGUID() == command.getGUID() then
                moved = i ~= target.cluster
                if moved then table.remove(cluster.raiders, j) break end
        end end
        if i == target.cluster and moved then table.insert(cluster.raiders, command) end
    end
end

function rollRaid(hotspot, commands, clusters)
    for _, cluster in ipairs(clusters) do for _, command in ipairs(cluster.raiders) do command.setVectorLines() end end
    rollConvoyCluster(hotspot, clusters, function ()
        checkTransports(getRegion(hotspot), commands)
        debriefAirCommands(commands)
        returnPiece(hotspot)
    end)
end

function rollConvoyCluster(hotspot, clusters, callback)
    if #clusters > 0 then
        local cluster, count = table.remove(clusters), 0
        if #cluster.raiders > 0 then
            debug('Rolling convoy cluster in region ', getRegion(hotspot))
            local anchor = vector(0, 0, 0)
            for _, command in ipairs(cluster.raiders) do
                debug('Inspecting command ', command.getGUID())
                anchor = anchor + command.getPosition()
                if command.getName() == 'cfighter' then count = count + 1
                else count = count + #command.getAttachments() end
            end
            debug('Found ', count, ' units raiding this cluster')
            anchor = (anchor * (1 / #cluster.raiders)):setAt('y', 8.5)
            local hits = {wild = {}}
            local roll_callback = function () convoyHits(anchor, hits, cluster, || rollConvoyCluster(hotspot, clusters, callback)) end
            debug('Rolling dice')
            rollDice(dicePositions(count, anchor, (Map.obj.positionToLocal(hotspot.getPosition()) - Map.data.center):setAt('y', 0):normalized()), function (dice) Wait.time(function ()
                debug('Processing roll results')
                for _, die in ipairs(dice) do
                    local color = getDieColor(die)
                    if color == 'red' and cluster.resources.oil and not hits.oil then hits.oil = die debug('Red die hits oil')
                    elseif color == 'blue' and cluster.resources.iron and not hits.iron then hits.iron = die debug('Blue die hits iron')
                    elseif color == 'yellow' and cluster.resources.osr and not hits.osr then hits.osr = die debug('Yellow die hits osr')
                    elseif color == 'black' then table.insert(hits.wild, die) debug('Rolled black die')
                    else die.destruct() debug('Rolled ', color, ' miss') end
                end
                if #hits.wild > 0 then
                    local missed = {}
                    for _, res in ipairs{'oil', 'iron', 'osr'} do if cluster.resources[res] and not hits[res] then table.insert(missed, res) end end
                    if #hits.wild < #missed then
                        debug('Need to assign black dice')
                    else
                        debug('Black dice assigned automatically')
                        for i, die in ipairs(hits.wild) do if i > #missed then die.destruct() else hits[missed[i]] = die end end
                        roll_callback()
                    end
                else roll_callback() end
            end, 1) end)
        else rollConvoyCluster(hotspot, clusters, callback) end
    else callback() end
end

function convoyHits(pos, hits, cluster, callback)
    local num = 0
    hits.wild = nil
    for _, _ in pairs(hits) do num = num + 1 end
    if num > 0 then
        debug('Assessing convoy hits')
        local offset = (Map.obj.positionToLocal(pos) - Map.data.center):setAt('y', 0):normalized():rotateOver('y', 90) * 0.71
        pos = pos + offset * 0.5 * (num - 1)
        for _, res in ipairs{'oil', 'iron', 'osr'} do if hits[res] then
            hits[res].setPositionSmooth(pos)
            pos = pos - offset * 0.5
        end end
        Wait.condition(function () Wait.frames(function ()
            for _, die in pairs(hits) do die.destruct() end
            local losses = {}
            for res, _ in pairs(hits) do for nation, value in pairs(cluster.resources[res]) do
                losses[nation] = losses[nation] or {}
                losses[nation][res] = -value
                debug(nation, ' lost ', value, ' ', res)
            end end
            for nation, loss in pairs(losses) do state.objects.resources[nation].call('addResources', loss) end
            callback()
        end, 5) end, function ()
            for _, die in pairs(hits) do if die.isSmoothMoving() then return false end end
            return true
        end)
    else callback() end
end
