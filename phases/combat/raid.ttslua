Combat.Raid = Combat.Action()

function Combat.Raid:main(commands)
    local region = Map.regions[self.hotspot.region]
    local raiders, clusters, targets = {}, {}, {}
    local axis = commands.axis.fleet or commands.axis.air
    debug('Resolving ', axis and 'axis' or 'allies', ' convoy raid in region ', region.id)
    for force, objs in pairs(commands[axis and 'axis' or 'allies']) do if force ~= 'army' then
        for _, obj in ipairs(objs) do table.insert(raiders, obj) end
    end end
    debug('Raid involves ', #raiders, ' commands')
    for _, cluster in ipairs(region:activeConvoys()[axis and 'allies' or 'axis']) do
        local resources = {}
        for origin, values in pairs(cluster) do
            local owner = Map.regions[origin:match('^%w%d+')]:owner()
            if origin:find('-') then for _, resource in ipairs{'oil', 'iron', 'osr'} do
                if values[resource] then resources[resource] = {[owner] = values[resource]} end
            end else for _, resource in ipairs{'oil', 'iron', 'osr'} do if values[resource] then
                local loss = math.min(Map.regions[origin]:income()[resource] or 0, values[resource])
                if loss > 0 then
                    resources[resource] = resources[resource] or {}
                    resources[resource][owner] = (resources[resource][owner] or 0) + loss
            end end end end
            table.insert(targets, {position = Map.positionToWorld({values.x, 0.6, values.z}), cluster = #clusters + 1})
        end
        table.insert(clusters, {resources = resources, raiders = {}})
    end
    debug('Raid involves ', #clusters, ' convoy clusters')
    if #clusters > 1 then
        local pids = {}
        for _, raider in ipairs(raiders) do self:updateTarget(raider, pids, function (command)
            self.setTarget(command, targets, clusters)
            debug('Updated raid target for ', command.guid)
        end, |command| command.setVectorLines()) end
        self.hotspot.obj.memo, self.hotspot.resume = 'raid', self.resume
        coroutine.yield()
        self.hotspot.obj.memo = 'busy'
        UI.setValue('combat-status' .. self.hotspot.hud, 'â™¦')
        debug('Confirming convoy raid in ', region.id)
        for _, pid in pairs(pids) do Wait.stop(pid) end
    else clusters[1].raiders = raiders end
    for _, cluster in ipairs(clusters) do for _, command in ipairs(cluster.raiders) do command.setVectorLines() end end
    for _, cluster in ipairs(clusters) do if #cluster.raiders > 0 then self:rollConvoyCluster(cluster) end end
    self:debrief()
end

function Combat.Raid:updateTarget(command, pids, set_fun, clear_fun)
    local fun, condition
    if command.getVectorLines() then fun, condition = clear_fun, || not command.resting
    else fun, condition = set_fun, || command.resting end
    pids[command.guid] = Wait.condition(function ()
        fun(command)
        self:updateTarget(command, pids, set_fun, clear_fun)
    end, condition)
end

function Combat.Raid.setTarget(command, targets, clusters)
    debug('Updating raid target for ', command.guid)
    local pos, distance, target = command.getPosition(), 1000
    for _, t in ipairs(targets) do if pos:distance(t.position) < distance then
        distance, target = pos:distance(t.position), t
    end end
    command.setVectorLines({{
        points = {vector(0, 0, 0), command.positionToLocal(target.position)},
        color = {0.9, 0.5, 0.2}, thickness = 0.1
    }})
    local moved = true
    debug('Checking if command changed targets')
    for i, cluster in ipairs(clusters) do
        for j, raider in ipairs(cluster.raiders) do if raider.guid == command.guid then
            moved = i ~= target.cluster
            if moved then table.remove(cluster.raiders, j) break end
        end end
        if i == target.cluster and moved then table.insert(cluster.raiders, command) end
    end
end

function Combat.Raid:rollConvoyCluster(cluster)
    debug('Rolling convoy cluster in region ', self.hotspot.region)
    local count, height, anchor = 0, 1, vector(0, 0, 0)
    for _, command in ipairs(cluster.raiders) do
        debug('Inspecting command ', command.guid)
        anchor = anchor + command.getPosition()
        if command.getName() == 'cfighter' then count = count + 1
        else count, height = count + command.units(), math.max(height, command.units()) end
    end
    debug('Found ', count, ' units raiding this cluster')
    anchor = (anchor * (1 / #cluster.raiders)):setAt('y', 7.75 + 0.21 * height)
    local hits, offset = {wild = {}}, Map:radialVector(anchor)
    Bags.dice:roll(Dice.positions(count, anchor, offset)):delay(1):next(|dice| self.resume(dice))
    for _, die in ipairs(coroutine.yield()) do
        local color = die:getColor()
        if color == 'red' and cluster.resources.oil and not hits.oil then hits.oil = die
        elseif color == 'blue' and cluster.resources.iron and not hits.iron then hits.iron = die
        elseif color == 'yellow' and cluster.resources.osr and not hits.osr then hits.osr = die
        elseif color == 'black' then table.insert(hits.wild, die)
        else die.destruct() end
    end
    if #hits.wild > 0 then
        local missed = {}
        for _, res in ipairs{'oil', 'iron', 'osr'} do if cluster.resources[res] and not hits[res] then
            table.insert(missed, res)
        end end
        if #hits.wild < #missed then
            debug('Need to assign black dice')
            local obj, buttons = cluster.raiders[1], {}
            for _, res in ipairs(missed) do table.insert(buttons, {{id = res, image = res}}) end
            local offset = anchor - obj.getPosition() + vector(0, 0.75, 0)
            self:createHitButtons(buttons, obj, offset)
            for _, die in ipairs(hits.wild) do
                setGlow(die)
                local res = coroutine.yield()
                stopGlow(die)
                hits[res] = die
                die:setColor(res == 'oil' and 'red' or res == 'iron' and 'blue' or 'yellow')
                obj.UI.hide(res)
            end
            obj.UI.setXml('')
        else
            debug('Black dice assigned automatically')
            for i, die in ipairs(hits.wild) do if i <= #missed then
                hits[missed[i]] = die
                die:setColor(missed[i] == 'oil' and 'red' or missed[i] == 'iron' and 'blue' or 'yellow')
            else die.destruct() end end
    end end
    hits.wild, count = nil, 0
    for _, _ in pairs(hits) do count = count + 1 end
    if count > 0 then self:assessHits(count, hits, cluster, anchor) end
end

function Combat.Raid:assessHits(count, hits, cluster, pos)
    debug('Assessing convoy hits')
    local offset = Map:radialVector(pos):rotateOver('y', 90) * math.sqrt(2)
    pos = pos + offset * 0.5 * (count - 1)
    for _, res in ipairs{'oil', 'iron', 'osr'} do if hits[res] then
        hits[res].setPositionSmooth(pos)
        pos = pos - offset
    end end
    Promise.condition(function ()
        for _, die in pairs(hits) do if die.isSmoothMoving() then return false end end
        return true
    end):skip(5):next(|| self.resume())
    coroutine.yield()
    local losses = {}
    for res, die in pairs(hits) do
        die.destruct()
        for nation, value in pairs(cluster.resources[res]) do
            losses[nation] = losses[nation] or {resources = {}, total = 0}
            losses[nation].resources[res], losses[nation].total = -value, losses[nation].total + value
    end end
    for nation, loss in pairs(losses) do
        Resources[nation]:addResources(loss.resources)
        if state.options and state.options.take_her_down then Morale:sunkConvoys(nation, loss.total) end
        local msg = Nations[nation]:colorized() .. ' lost'
        for res, value in pairs(loss.resources) do msg = string.format('%s %s %s,', msg, string.colorize(-value, res), res) end
        msg = string.format('%s from convoy raid in %s', msg:sub(1, -2), Map.regions[self.hotspot.region]:colorizedName())
        alert(msg)
    end
end
