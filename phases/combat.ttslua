-- TODO:
---- 1. Dependencies between combats: raids spawning or canceling, change in port advantage, etc.
---- 2. Multiple battles due to pact, or due to ownership reversion

Combat = Phase()

function Combat:main()
    HUD.updateTracker('Resolve hotspots', '4 - Combat Operations', 'combat')
    HUD.resetStatus()
    local combatants = {}
    if state.phase < 4 then
        HUD.close('orders')
        if not state.pact_broken then
            debug('Checking for Article 4 violations')
            local destroyed = {}
            for nation, other in pairs{japan = 'ussr', ussr = 'japan'} do for id, command in pairs(Commands[nation]) do if id > 19 then
                local region = command:region()
                if region and Map.regions[region]:owner() == other then table.insert(destroyed, command) end
            end end end
            if #destroyed > 0 then
                for i = 1, #destroyed do destroyed[i] = destroyed[i]:destroy() end
                Promise.all(destroyed):next(|| self.resume())
                coroutine.yield()
        end end
        debug('Placing new hotspots')
        local ps = {}
        for id, commands in pairs(Commands:byRegion()) do
            local region, action = Map.regions[id], Hotspot.action({region = id}, commands)
            if action then
                debug(id, ' is a ', action, ' hotspot')
                if not region.hotspot then
                    debug('Missing ', action, ' hotspot in region ', id)
                    local p, pos = Promise(), region.centroid or region.circle.c
                    table.insert(ps, p)
                    Bags.hotspot.takeObject({
                        position = Map.positionToWorld(pos:copy():setAt('y', 1)),
                        callback_function = function (obj)
                            region.hotspot = Hotspot(obj, id)
                            obj.addTag('active')
                            combatants[id] = region.hotspot:getCombatants(commands)
                            p:resolve()
                end}) else
                    region.hotspot.UI.show('region')
                    combatants[id] = region.hotspot:getCombatants(commands)
                end
            else
                debug('No hotspot action in ', id)
                for side, forces in pairs(commands) do for _, command in ipairs(forces.air or {}) do
                    if command.hasTag('landing') then table.insert(ps, command:placeArrow()) end
                end end
                if region.hotspot then
                    debug('Removing invalid hotspot')
                    table.insert(ps, region.hotspot:stash())
                    region.hotspot = nil
        end end end
        state.phase, state.step = 4, #turnOrder.get()
        if #ps > 0 then
            Promise.all(ps):next(|| self.resume())
            coroutine.yield()
    end else state.step = state.step == 1 and #turnOrder.get() or state.step - 1 end
    debug('Setting up combat HUD')
    local regions = {}
    for id, region in pairs(Map.regions) do if region.hotspot then
        local rotation = Map:rotationToCenter(region.centroid or region.circle.c)
        table.insert(regions, {angle = (414.5 - rotation) % 360, region = region})
        combatants[id] = combatants[id] or region.hotspot:getCombatants()
    end end
    table.sort(regions, |a, b| a.angle < b.angle)
    for i, data in ipairs(regions) do
        local hotspot = data.region.hotspot
        hotspot.hud = i
        debug('Displaying hotspot ', i)
        local clr, region, name = data.region:colorizedName():match('%[(%w+)%](%a%-?%d+)%b[](.*)')
        UI.setValue('combat-id' .. i, region)
        UI.setAttribute('combat-id' .. i, 'color', '#' .. clr)
        if name ~= '' then
            UI.setValue('combat-name' .. i, name:sub(4))
            UI.setAttribute('name-panel' .. i, 'color', '#000000b0')
        else UI.setAttribute('name-panel' .. i, 'color', 'clear') end
        local total = {axis = 0, allies = 0}
        for nation, _ in pairs(combatants[data.region.id]) do
            local side = Nations[nation].side
            total[side] = total[side] + 1
            UI.setAttributes('combatants' .. i .. '-' .. side .. total[side], {image = nation, active = true})
        end
        for side, count in pairs(total) do
            debug(count, ' ', side, ' combatants')
            if count < 3 then for j = count + 1, 3 do UI.hide('combatants' .. i .. '-' .. side .. j) end end
            UI.setAttribute('combatants' .. i .. '-' .. side, 'padding', 29 - 9 * count .. ' ' .. 29 - 9 * count .. ' 1 1')
        end
        UI.setValue('combat-status' .. i, hotspot.hasTag('inactive') and '✓' or hotspot.hasTag('busy') and '♦' or '')
        UI.show('combat-clear' .. i)
        UI.show('hotspot' .. i)
    end
    UI.setAttributes('combat', {height = 26 + 24 * #regions, offsetXY = '0 ' .. -12 * (24 - #regions)})
    Wait.frames(function () if #regions < 24 then for j = #regions + 1, 24 do UI.hide('hotspot' .. j) end end end, 1)
    HUD.open('combat')
    state.battle_queue = {}
    local resume, all_clear = coroutine.wrap(function () while self:nextTurn() do coroutine.yield() end end)
    tryObjectRandomize = |obj, player| self:tryRandomize(obj, player, resume)
    resume()
    repeat
        all_clear = true
        for _, region in pairs(Map.regions) do if region.hotspot and not region.hotspot.hasTag('inactive') then
            all_clear = false break
        end end
    until all_clear or coroutine.yield()
    self.resume, state.battle_queue, tryObjectRandomize = nil
end

function Combat:tryRandomize(obj, player, resume)
    local hotspot
    if obj ~= nil and obj.getName() == 'hotspot' then
        for _, region in pairs(Map.regions) do if region.hotspot and region.hotspot.guid == obj.guid then
            if obj.hasTag('raid') then region.hotspot.resume()
            elseif obj.hasTag('active') and region.hotspot:getCombatants()[turnOrder[state.step]] then
                if player == 'Black' or Nations[turnOrder[state.step]].side == Nations:byPlayer(player).side then
                    if region.hotspot:activate() then resume() end
        end end end end
        return false
    end
    return true
end

function Combat:nextTurn()
    debug('Advancing to next combat turn')
    local turn_order, next_turn, counts, nation = turnOrder.get(), state.step, {}
    HUD.updateStatus(turn_order[state.step])
    for id, commands in pairs(Commands:byRegion()) do
        local hotspot = Map.regions[id].hotspot
        if hotspot and hotspot.hasTag('active') then for nation, _ in pairs(hotspot:getCombatants(commands)) do
            counts[nation] = (counts[nation] or 0) + 1
    end end end
    repeat
        next_turn = next_turn % #turn_order + 1
        nation = turn_order[next_turn]
    until counts[nation] or next_turn == state.step
    HUD.updateTurn(nation)
    if counts[nation] then HUD.updateStatus(nation, counts[nation], nil, 'hotspot') else HUD.updateStatus(nation) end
    state.step = next_turn
    return counts[nation] ~= nil
end

-- Hotspot helper functions

function Combat.nationOnly(nation, ...)
    local commands = {}
    for _, list in pairs({...}) do if list then
        for _, item in ipairs(list) do table.insert(commands, item) end
    end end
    for _, command in ipairs(commands) do if command.nation ~= nation then return false end end
    return true
end

function Combat.convoyOnly(nation, convoys)
    local owner
    for _, cluster in ipairs(convoys) do for origin, _ in pairs(cluster) do
        owner = Map.regions[origin:find('-') and origin:match('^%w+') or origin]:owner()
        if owner ~= nation then return false end
    end end
    return true
end

-- -- Combat actions

Combat.Action = {__call = function (T, hotspot, commands)
    local t = {hotspot = hotspot}
    setmetatable(t, {__index = T})
    t.resume = coroutine.wrap(|...| t:main(...))
    hotspot.resume = t.resume
    t.resume(commands)
end, __index = Combat}
setmetatable(Combat.Action, {__call = function (T)
    local t = {}
    setmetatable(t, T)
    return t
end})

#include combat/battle
#include combat/uncontested
#include combat/raid
#include combat/debrief

Combat.BombOrder = {
    {color = 'white', target = 'bomb'},
    {color = 'yellow', target = 'osr'},
    {color = 'blue', target = 'iron'},
    {color = 'red', target = 'oil'},
    {color = 'yellow', target = 'infantry'},
    {color = 'blue', target = 'artillery'},
    {color = 'green', target = 'armor'},
    {color = 'green', target = 'fighter'},
    {color = 'red', target = 'bomber'},
    {color = 'yellow', target = 'submarine'},
    {color = 'blue', target = 'cruiser'},
    {color = 'green', target = 'carrier'},
    {color = 'red', target = 'battleship'}
}

function Combat:assignBombs(dice, targets, ui)
    local region = Map.regions[self.hotspot.region]
    local owner, p = region:owner()
    log(targets)
    for _, die in ipairs(dice) do
        local die_color = die:getColor()
        local wild = die_color == 'black'
        debug('Checking ', die_color, ' die')
        if wild or targets[die_color] then
            setGlow(die)
            for clr, ids in pairs(targets) do if wild or clr == die_color then
                for id, _ in pairs(ids) do ui.setAttributes(clr .. '-' .. id, {
                    interactable = true, textColor = ui.getAttribute(clr .. '-' .. id, 'textColor')
                }) end
            end end
            local hit_color, hit_id = coroutine.yield():match('(%a+)%-(%a+)')
            debug('Hitting ', hit_color, ' ', hit_id)
            stopGlow(die)
            p = fadeOut(die)
            for clr, ids in pairs(targets) do if wild or clr == die_color then for id, _ in pairs(ids) do
                ui.setAttribute(clr .. '-' .. id, 'interactable', false)
            end end end
            if targets[hit_color][hit_id] == 1 then targets[hit_color][hit_id] = nil
            else targets[hit_color][hit_id] = targets[hit_color][hit_id] - 1 end
            ui.setAttribute(hit_color .. '-' .. hit_id, 'text', targets[hit_color][hit_id] or '')
            if not next(targets[hit_color]) then targets[hit_color] = nil end
            if hit_id == 'osr' or hit_id == 'iron' or hit_id == 'oil' then
                Resources[owner]:add({[hit_id] = -1})
                alert(string.format('%s lost %s %s from bombing in %s',
                    Nations[owner]:colorized(), string.colorize(1, hit_id), hit_id, region:colorizedName()))
            else
                if hit_id == 'bomb' then
                    local bombs = region.bombs
                    local position, rotation = self.hotspot.getPosition() + vector(0, 1, 0), {180, math.random(360), 0}
                    if bombs then position, rotation = bombs[#bombs].getPosition() + vector(0, 0.25, 0), bombs[#bombs].getRotation() end
                    local bomb = Bags.bomb_industry.takeObject({
                        position = position, rotation = rotation,
                        callback_function = |obj| Wait.condition(|| self.resume(), || not obj.isSmoothMoving())
                    })
                    if bombs then table.insert(bombs, bomb) else region.bombs = {bomb} end
                    alert('Infrastructure was destroyed in ' .. region:colorizedName())
                else
                    region.construction:destroyUnit(hit_id):next(|| self.resume())
                    alert(string.format('%s under construction was destroyed by bombing in %s',
                        hit_id:proper():colorize(hit_id), region:colorizedName()))
                end
                coroutine.yield()
            end
        else p = fadeOut(die) end
    end
    p:next(|| self.resume())
    coroutine.yield()
end
