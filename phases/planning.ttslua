Planning = Phase()

function Planning:main()
    if state.phase >= 2 then
        for nation, orders in pairs(Orders) do orders:restoreOrders() end
        if state.phase > 2 then self.resume = nil return end
    else state.phase, state.step = 2, 0 end
    HUD.updateTracker('Write orders and bids', '2 - Strategic Planning', 'orders')
    HUD.resetStatus()
    if state.step < 2 then
        local readied = {}
        for _, nation in turnOrder() do
            readied[nation] = false
            Orders[nation]:writeOrders(|...| self.resume(...), Morale.stressZone(nation) > 3, state.step == 1)
            if state.scenario == 'global' and not state.pact_broken then Orders[nation].UI.setAttribute('pact', 'interactable', true) end
        end
        state.step = 1
        Phase.readyLoop(readied)
    end
    self:setTurnOrder(self:revealBids())
    for i, nation in turnOrder() do
        UI.setAttribute('tracker' .. i, 'image', nation)
        if nation ~= 'china' and Orders[nation].bid > 0 then Resources[nation]:add({oil = -Orders[nation].bid})
        else Resources[nation]:updateUI() end
    end
    HUD.updateTurn()
    HUD.resetStatus()
    self.resume = nil
end

function Planning:revealBids()
    HUD.updateTracker('Reveal bids')
    HUD.resetStatus()
    local bids = {}
    for _, nation in turnOrder() do
        if nation ~= 'china' then
            Orders[nation].UI.setAttribute('bid', 'visibility', '')
            bids[nation] = Orders[nation].bid
            broadcastToAll(string.format('%s bid %s oil', Nations[nation]:colorized(), string.colorize(bids[nation], 'oil')))
        else bids[nation] = 0 end
        HUD.updateStatus(nation, bids[nation], Color.oil)
        Wait.time(|| self.resume(), 0.5)
        coroutine.yield()
    end
    return bids
end

function Planning:setTurnOrder(bids)
    state.step = 2
    HUD.updateTracker('Establish turn order', nil, 'turn_order')
    local order, spots, total, token = {}, {}, 0
    for nation, bid in pairs(bids) do
        Tokens.turn[nation].setLock(true)
        table.insert(order, {bid = bid + math.random(), nation = nation, turn = turnOrder[nation]})
        total = total + 1
    end
    table.sort(order, |a, b| a.bid < b.bid)
    for i = 1, #order do spots[i] = Map.positionToWorld(Map.snaps[i].position) end
    onObjectDrop = function (_, obj) if obj.guid == token.guid then Wait.frames(function () for i = 1, total do
        if spots[i] and obj.getPosition():setAt('y', spots[i].y) == spots[i] then self.resume(i) break end
    end end, 5) end end
    while #order > 0 do
        local data = table.remove(order)
        token = Tokens.turn[data.nation]
        HUD.updateTurn(data.nation, data.turn)
        setGlow(token)
        token.setLock(false)
        local prev, spot = token, coroutine.yield()
        stopGlow(token)
        Wait.condition(|| prev.setLock(true), || prev.resting)
        HUD.updateStatus(data.nation, ({'①', '②', '③', '④', '⑤', '⑥', '⑦'})[spot], Color.white, nil, data.turn)
    end
    onObjectDrop = nil
end
