#include constants/battle
#include constants/nations
#include xml/battle
#include stacks
#include dice
#include debug

--- Save and load ---

function onLoad()
    state = {}
    self.UI.setXml(XML)
    loadZones()
    local GUIDs = Global.getTable('GUIDs')
    HotspotBag, ArrowBag = getObjectFromGUID(GUIDs.Bags.hotspot), getObjectFromGUID(GUIDs.Bags.arrow)
    DieBags = {getObjectFromGUID(DieGUIDs[1]), getObjectFromGUID(DieGUIDs[2])}
    MoraleBoard = getObjectFromGUID(GUIDs.MoraleBoard)
    self.addContextMenuItem('Reset script', || resetState())
end

--- Battle setup ---
#include battle/setup

--- Combat stage setup ---
#include battle/stages

--- Roll dice and assign hits ---
#include battle/rolls

--- Repairs ---
#include battle/repairs

--- Combat cleanup ---
#include battle/cleanup

--- Helpers ---

function combatMode() if self.is_face_down then return 'sea' else return 'land' end end

function getColumn(obj)
    local labels = {}
    for _, columns in pairs(ZoneParams[combatMode()].sides) do
        for column, val in pairs(columns) do if column == 'nations' then
            for nation, x in pairs(val) do table.insert(labels, {label = nation, x = x}) end
        elseif column ~= 'units' then table.insert(labels, {label = column:gsub('%d+', ''), x = val})
    end end end
    local pos, closest, label = self.positionToLocal(obj.getPosition()), 100
    for _, column in ipairs(labels) do if math.abs(pos.x - column.x) < closest then closest, label = math.abs(pos.x - column.x), column.label end end
    return label
end

function getUnitStance(obj)
    local pos, closest, unit_label, stance_label = self.positionToLocal(obj.getPosition()), 100
    for unit, stances in pairs(ZoneParams[combatMode()].units) do for stance, z in pairs(stances) do
        if math.abs(pos.z - z) < closest then closest, unit_label, stance_label = math.abs(pos.z - z), unit, stance end
    end end
    return unit_label, stance_label
end

function isAbove(obj1, obj2)
    return obj1.getPosition().y - (obj1.is_face_down and 0.21 or 0) > obj2.getPosition().y - (obj2.is_face_down and 0.21 or 0)
end

function stackOn(obj1, obj2)
    local pos = obj2.getPosition()
    if obj1.is_face_down then pos = pos + vector(0, 0.21, 0) end
    if obj2.is_face_down then pos = pos + vector(0, 0.01, 0) else pos = pos + vector(0, 0.22, 0) end
    obj1.setPositionSmooth(pos)
end

function setBlinker(obj)
    obj.highlightOn({1, 1, 1}, 0.5)
    obj.setVar('blinker', Wait.time(|| obj.highlightOn({1, 1, 1}, 0.5), 1, -1))
end
function stopBlinker(obj) Wait.stop(obj.getVar('blinker')) end

function other(side) if side == 'axis' then return 'allies' else return 'axis' end end
