function initXML(order_rows, is_china)
    local Z = ' -59'
    local function round()
        return {tag = 'Text', attributes = {id = 'round',
            height = '97', width = '105',
            position = '560 -586' .. Z, rotation = '0 0 180'
        }}
    end

    local function bid()
        return {tag = 'InputField', attributes = {id = 'bid',
            height = '97', width = '105',
            position = '71 -586' .. Z, rotation = '0 0 180',
            characterValidation = 'Integer', characterLimit = '2',
            onValueChanged = 'updateBid'
        }}
    end

    local function pact()
        return {tag = 'Button', attributes = {id = 'pact',
            height = '90', width = '200', position = '0 -775' .. Z, rotation = '0 0 180', scale = '0.8 1',
            text = 'Break pact', fontSize = '28', icon = 'pact', colors = '#c0c0c0ff|white|red|#a0a0a080',
            onClick = 'breakPact', interactable = 'false', active = 'false'
        }}
    end

    local function movement(rows, label, cell, attributes)
        attributes = attributes or {}
        local row_xml = {}
        for i = 1, rows do
            local col_xml = {}
            for j = 1, 3 do table.insert(col_xml, {tag = 'Cell', children = {cell(label, (i - 1) * 3 + j)}}) end
            table.insert(row_xml, {tag = 'Row', children = col_xml})
        end
        attributes.class = 'movement'
        return {tag = 'TableLayout', children = row_xml, attributes = attributes}
    end

    local function movementInput(label, count)
        return {tag = 'InputField', attributes = {class = label, id = label .. count}}
    end

    local function movementButtons()
        return {tag = 'Panel', attributes = {id = 'resolve',
            height = '320', width = '260', position = '670 -390' .. Z,
            rotation = '0 0 180', scale = '0.8 1', active = 'false'}, children = {
                {tag = 'Button', attributes = {class = 'resolve', id = 'confirm',
                    position = '-130 0 0', rotation = '0 0 90', text = 'Confirm', icon = 'resources',
                    colors = '#ffffffff|#00cc00ff|#00cc00ff|#000000b2', onClick = 'confirmOrder'
                }},
                {tag = 'Button', attributes = {class = 'resolve', id = 'cancel',
                    position = '130 0 0', rotation = '0 0 -90', text = 'Cancel', icon = 'resources-hover',
                    colors = '#ffffffff|#ff0000ff|#ff0000ff|#000000b2', onClick = 'cancelOrder'
                }}
        }}
    end

    local function movementSlash(label, count)
        return {tag = 'Text', attributes = {class = label, id = label .. count}}
    end

    local function preTrade(is_china)
        local total_xml, trade_xml = {}, {}
        for i, resource in ipairs{'oil', 'iron', 'osr'} do
            table.insert(total_xml, {tag = 'Cell',
                attributes = is_china and {} or {columnSpan = '2'},
                children = {{tag = 'Panel', attributes = {class = 'resources'},
                    children = (i > 1 or not is_china) and {
                        {tag = 'Text', attributes = {id = 'resources-' .. resource}}
                    } or {}
            }}})
            table.insert(trade_xml, {tag = 'Cell', children = {
                {tag = 'Panel', attributes = {class = 'plus_minus'}, children = {
                    {tag = 'VerticalLayout', children = {
                        {tag = 'ToggleButton', attributes = {class = 'trade', id = 'minus-' .. resource}},
                        {tag = 'ToggleButton', attributes = {class = 'trade', id = 'plus-' .. resource}}
            }}}}}})
            table.insert(trade_xml, {tag = 'Cell', children = {
                {tag = 'Panel', attributes = {class = 'trade'}, children = {
                    {tag = 'Text', attributes = {class = 'trade', id = 'trade-' .. resource}}
            }}}})
        end
        local row_xml = {{tag = 'Row', children = total_xml}}
        if not is_china then table.insert(row_xml, {tag = 'Row', children = trade_xml}) end
        return {tag = 'TableLayout', attributes = {class = 'resources'}, children = row_xml}
    end

    local function postTrade(is_china)
        local col_xml = {}
        for i, resource in ipairs{'oil', 'iron', 'osr'} do
            table.insert(col_xml, {tag = 'Cell', children = (i > 1 or not is_china) and {
                {tag = 'Text', attributes = {id = 'post_trade-' .. resource}}
            } or {}})
        end
        return {tag = 'TableLayout', attributes = {id = 'post_trade',
            class = 'totals', height = '145', position = '-575 -610' .. Z
        }, children = {{tag = 'Row', children = col_xml}}}
    end

    local function purchases(is_china)
        local row_xml = {{tag = 'Row', children = {
            {tag = 'Cell', children = {{tag = 'Text', attributes = {id = 'cg-purchase'}}}},
            {tag = 'Cell', children = is_china and {} or {{tag = 'InputField', attributes = {class = 'purchase', id = 'cg-oil'}}}},
            {tag = 'Cell', children = {{tag = 'InputField', attributes = {class = 'purchase', id = 'cg-iron'}}}},
            {tag = 'Cell', children = {{tag = 'InputField', attributes = {class = 'purchase', id = 'cg-osr'}}}}
        }}}
        for i, unit in ipairs{'infantry', 'artillery', 'armor', 'fighter', 'bomber', 'submarine', 'cruiser', 'carrier', 'battleship'} do
            local col_xml = {{tag = 'Cell', children = {
                {tag = 'InputField', attributes = {class = 'purchase', id = unit .. '-purchase'}}
            }}}
            for j, resource in ipairs{'oil', 'iron', 'osr'} do
                table.insert(col_xml, {tag = 'Cell', children = i + j > 3 and {
                    {tag = 'Text', attributes = {id = unit .. '-' .. resource}}
                } or {}})
            end
            if i < 3 or not is_china then table.insert(row_xml, {tag = 'Row', children = col_xml}) end
        end
        return {tag = 'TableLayout', attributes = {id = 'purchases',
            class = 'purchases', cellPadding = '70 0 6 6'
        }, children = row_xml}
    end

    local function remaining(is_china)
        local cost_xml, remaining_xml = {}, {}
        for i, resource in ipairs{'oil', 'iron', 'osr'} do
            table.insert(cost_xml, {tag = 'Cell', children = (i > 1 or not is_china) and {
                {tag = 'Text', attributes = {id = 'cost-' .. resource}}
            } or {}})
            table.insert(remaining_xml, {tag = 'Cell', children = (i > 1 or not is_china) and {
                {tag = 'Text', attributes = {id = 'remaining-' .. resource}}
            } or {}})
        end
        return {tag = 'TableLayout', attributes = {id = 'remaining',
            class = 'totals', height = '290', position = '-570 655' .. Z
        }, children = {{tag = 'Row', children = cost_xml}, {tag = 'Row', children = remaining_xml}}}
    end

    local function defaults(order_rows, is_china)
        return {tag = 'Defaults', children = {
            {tag = 'TableLayout', attributes = {rotation = '0 0 180', cellBackgroundColor = 'clear'}},
            {tag = 'TableLayout', attributes = {class = 'movement',
                height = 356 * order_rows .. '', width = '780',
                position = '410 ' .. (order_rows == 3 and '-34' or '-212') .. Z
            }},
            {tag = 'TableLayout', attributes = {class = 'resources',
                height = is_china and '125' or '250', width = '770',
                position = '405 ' .. (is_china and '592' or '655') .. Z
            }},
            {tag = 'TableLayout', attributes = {class = 'purchases',
                height = is_china and '321' or '1070', width = '700',
                position = '-452 ' .. (is_china and '-389' or '-15') .. Z
            }},
            {tag = 'TableLayout', attributes = {class = 'totals', width = '525'}},
            {tag = 'Panel', attributes = {class = 'resources', padding = '80 50 0 20'}},
            {tag = 'Panel', attributes = {class = 'plus_minus', padding = '95 0 42 12'}},
            {tag = 'Panel', attributes = {class = 'trade', padding = '0 80 42 12'}},
            {tag = 'InputField', attributes = {
                colors = '#ffffff3f|#ffffff7f|#ffffff00|#00000000',
                scale = '0.8 1', fontSize = '72',
                placeholder = ' ', interactable = 'false'
            }},
            {tag = 'InputField', attributes = {class = 'command',
                characterValidation = 'Integer', characterLimit = '3',
                onEndEdit = 'updateOrder'
            }},
            {tag = 'InputField', attributes = {class = 'target',
                characterLimit = '4', onEndEdit = 'updateOrder'
            }},
            {tag = 'InputField', attributes = {class = 'purchase',
                characterValidation = 'Integer', characterLimit = '2',
                onValueChanged = 'updatePurchase'
            }},
            {tag = 'Button', attributes = {class = 'resolve',
                height = '75', width = '240', ignoreLayout = 'true', fontSize = '30'
            }},
            {tag = 'ToggleButton', attributes = {rotation = '0 0 180', active = false}},
            {tag = 'ToggleButton', attributes = {class = 'ready',
                height = '32', width = '64', position = '415 -588' .. Z,
                scale = '2.4 3', text = 'Ready', fontSize = '18',
                colors = '#ffffff|#00ff00|#ffff00|#404040ff', isOn = true
            }},
            {tag = 'ToggleButton', attributes = {class = 'trade',
                height = '30', width = '30', fontSize = '20', color = '#ffffff33',
                onValueChanged = 'toggleTrade', transition = 'None'
            }},
            {tag = 'Text', attributes = {scale = '0.8 1', fontSize = '72'}},
            {tag = 'Text', attributes = {class = 'slash',
                scale = '2.5 1.5', fontSize = '240', text = '\\', active = 'false'
            }},
            {tag = 'Text', attributes = {class = 'trade',
                scale = '1 1', fontStyle = 'Bold', verticalOverflow = 'Overflow'
        }}}}
    end

    local xml = {
        defaults(order_rows, is_china),
        round(),
        pact(),
        {tag = 'ToggleButton', attributes = {class = 'ready', id = 'orders-ready',
            onValueChanged = 'ordersReady'
        }},
        {tag = 'ToggleButton', attributes = {class = 'ready', id = 'production-ready',
            onValueChanged = 'productionReady'
        }},
        {tag = 'ToggleButton', attributes = {class = 'ready', id = 'other-ready',
            onValueChanged = 'otherReady'
        }},
        movement(order_rows, 'command', |a, b| movementInput(a, b), {id = 'commands', cellPadding = '60 60 50 210'}),
        movement(order_rows, 'target', |a, b| movementInput(a, b), {id = 'targets', cellPadding = '40 40 210 50'}),
        movement(order_rows, 'slash', |a, b| movementSlash(a, b)),
        movementButtons(),
        preTrade(is_china),
        postTrade(is_china),
        purchases(is_china),
        remaining(is_china)
    }
    if not is_china then table.insert(xml, bid()) end
    return xml
end
