#include constants/nations
#include constants/colors
#include constants/costs
#include xml/orders
#include debug

function onLoad()
    Nation = self.getName():match('^(%a+)%s'):lower()
    Resources = getObjectFromGUID(Global.getTable('GUIDs').Nations[Nation].resources)
    if Nation == 'china' then
        Trades = {}
        state.trade = nil
        for unit, cost in pairs(Costs) do if unit ~= 'cg' then cost.oil = nil end end
        for k, v in pairs(state) do if k == 'production' then
            for unit, cost in pairs(v) do cost.oil = nil end
        elseif k ~= 'bid' and k ~= 'moves' then v.oil = nil end end
    end
    if Nation == 'china' or Nation == 'italy' then NumOrders = 6 else NumOrders = 9 end
    self.UI.setXmlTable(initXML(NumOrders / 3, Nation == 'china'))
end

-- GAME PHASE FUNCTIONS --

-- Phase 1: Direct National Economy

function setRound(data)
    self.UI.setValue('round', data[1])
    if Nation ~= 'china' then
        self.UI.hide('bid')
        for _, resource in ipairs{'oil', 'iron', 'osr'} do for _, label in ipairs{'trade', 'minus', 'plus'} do
            self.UI.hide(label .. '-' .. resource)
    end end end
    for i = 1, NumOrders, 1 do self.UI.hide('slash' .. i) end
    for _, id in ipairs{'commands', 'targets', 'purchases', 'post_trade', 'remaining'} do self.UI.hide(id) end
end

-- Phase 2: Strategic Planning

function writeOrders()
    if Nation ~= 'china' then self.UI.setAttributes('bid', {active = true, visibility = getVis()}) end
    self.UI.setAttributes('commands', {active = true, visibility = getVis()})
    self.UI.setAttributes('targets', {active = true, visibility = getVis()})
    self.UI.setAttributes('orders-ready', {isOn = true, active = true, color = '#FFFFFF'})
    setOrders(false, true)
end

function setOrders(lock, clear)
    for _, label in ipairs{'command', 'target'} do for i = 1, NumOrders, 1 do
        self.UI.setAttribute(label .. i, 'interactable', not lock)
        if clear then
            if state.moves[i] then state.moves[i][label] = nil end
            self.UI.setAttribute(label .. i, 'text', '')
    end end end
    if Nation ~= 'china' then
        self.UI.setAttribute('bid', 'interactable', not lock)
        if clear then
            if state.bid then state.bid = 0 end
            self.UI.setAttribute('bid', 'text', '')
    end end
end

function updateOrder(_, value, id)
    local part, index = id:sub(1, -2), tonumber(id:sub(-1))
    if value == '' then
        value = nil
        validOrders(id)
    elseif part == 'command' then
        value = tonumber(value)
        if Global.call('validateCommand', {Nation, value}) then validOrders(id) else invalidOrders(id) end
    else
        local region = value:lower():gsub('-', ''):match('^[abcgijmnprtu]%d%d?$')
        if region and Global.call('validateRegion', {region}) then
            value = region:gsub('[aimp]', '%1-'):upper()
            validOrders(id)
        else invalidOrders(id)
    end end
    self.UI.setAttribute(id, 'text', value or '')
    state.moves[index] = state.moves[index] or {}
    state.moves[index][part] = value
end

function updateBid(_, value, id)
    self.UI.setAttribute(id, 'text', value)
    if value ~= '' and value + 0 > state.resources.oil then invalidOrders(id)
    else
        state.bid = value ~= '' and tonumber(value) or 0
        validOrders(id)
    end
end

function validOrders(id)
    self.UI.setAttribute(id, 'textColor', 'black')
    if self.UI.getAttribute('orders-ready', 'interactable') == 'False' then self.UI.setAttribute('orders-ready', 'interactable', true) end
end

function invalidOrders(id)
    self.UI.setAttribute(id, 'textColor', 'red')
    self.UI.setAttribute('orders-ready', 'interactable', false)
end

function toggleReady(_, value, id)
    value = value == 'True'
    self.UI.setAttributes(id, {isOn = value, color = value and '#FFFFFF' or '#80FF80'})
    if id:match('orders') then setOrders(not value)
    elseif id:match('production') then setProduction(not value) end
    Global.call('playerReady', {[Nation] = not value})
end

function revealBid()
    if Nation ~= 'china' then self.UI.setAttribute('bid', 'visibility', '') end
    self.UI.hide('orders-ready')
    return state.bid
end

function payBid()
    if Nation ~= 'china' then Resources.call('addResources', {oil = -state.bid}) end
end

-- Phase 3: Movement Operations

function resolveOrders()
    self.UI.setAttribute('commands', 'visibility', '')
    self.UI.setAttribute('targets', 'visibility', '')
    resolveOrder(1)
end

function resolveOrder(num)
    if num > NumOrders then
        Global.call('movementComplete', {nation = Nation})
    elseif state.moves[num] then
        local move = state.moves[num]
        if move.command and move.target then
            Global.call('evaluateOrder', {Nation, tonumber(move.command), move.target})
            self.UI.show('resolved' .. num)
            self.UI.show('canceled' .. num)
        else orderCanceled(nil, nil, 'canceled' .. num) end
    else orderCanceled(nil, nil, 'canceled' .. num) end
end

function orderResolved(_, _, id)
    local action, i = id:match('(%a+)(%d)')
    self.UI.hide('resolved' .. i)
    self.UI.hide('canceled' .. i)
    if action == 'resolved' then Global.call('commandMoved', {nation = Nation, command = tonumber(state.moves[tonumber(i)].command)}) end
    resolveOrder(i + 1)
end

function orderCanceled(_, _, id)
    self.UI.show('slash' .. id:sub(-1))
    orderResolved(nil, nil, id)
end

function cfighterMovement()
    self.UI.setAttributes('cfighters-ready', {isOn = true, active = true, color = '#FFFFFF'})
end

function cfighterDone()
    self.UI.hide('cfighters-ready')
end

-- Phase 7: Production

function writeProduction()
    for _, id in ipairs{'purchases', 'post_trade', 'remaining'} do self.UI.setAttributes(id, {active = true, visibility = getVis()}) end
    if Nation ~= 'china' then for _, resource in ipairs{'oil', 'iron', 'osr'} do for _, label in ipairs{'trade', 'minus', 'plus'} do
        self.UI.show(label .. '-' .. resource)
    end end end
    self.UI.setAttributes('production-ready', {isOn = true, active = true, color = '#FFFFFF'})
    setProduction(false, true)
end

function setProduction(lock, clear)
    for unit, _ in pairs(state.production) do if unit == 'cg' then
        for resource, _ in pairs(state.resources) do
            self.UI.setAttribute('cg-' .. resource, 'interactable', not lock)
            if clear then
                self.UI.setAttribute('cg-' .. resource, 'text', '')
                updatePurchase(_, '', 'cg-' .. resource)
    end end else
        self.UI.setAttribute(unit .. '-purchase', 'interactable', not lock)
        if clear then
            self.UI.setAttribute(unit .. '-purchase', 'text', '')
            updatePurchase(_, '', unit .. '-purchase')
    end end end
    if Nation ~= 'china' then for resource, _ in pairs(state.resources) do for _, sign in ipairs{'plus', 'minus'} do
        self.UI.setAttribute(resource .. '-' .. sign, 'interactable', not lock)
        if clear then
            self.UI.setAttribute(resource .. '-' .. sign, 'isOn', false)
            if state.trade[sign] == resource then toggleTrade(_, 'False', resource .. '-' .. sign) end
    end end end end
end

function toggleTrade(_, value, id)
    local sign, resource = id:match('(%a+)%-(%a+)')
    local other, color
    if sign == 'plus' then color, other = 'rgba(0.2,1,0.2,0.5)', 'minus'
    else color, other = 'rgba(1,0.2,0.2,0.5)', 'plus' end
    if value == 'True' then
        state.trade[sign] = resource
        if state.trade[other] == resource then state.trade[other] = nil end
        self.UI.setAttribute(id, 'color', color)
        resetToggle(other .. '-' .. resource)
        for _, res in ipairs({'oil', 'iron', 'osr'}) do if res != resource then resetToggle(sign .. '-' .. res) end end
    else
        state.trade[sign] = nil
        self.UI.setAttribute(id, 'color', 'rgba(1,1,1,0.2)')
    end
    updateTrade()
end

function resetToggle(id)
    self.UI.setAttribute(id, 'isOn', 'False')
    self.UI.setAttribute(id, 'color', 'rgba(1,1,1,0.2)')
end

function updateTrade()
    for resource, _ in pairs(state.resources) do
        local tid, rid = 'trade-' .. resource, 'post_trade-' .. resource
        state.post_trade[resource] = state.resources[resource]
        if Nation ~= 'china' then if resource == state.trade.plus then
            self.UI.setAttribute(tid, 'color', 'green')
            self.UI.setValue(tid, Trades[resource])
            if state.trade.minus then state.post_trade[resource] = state.resources[resource] + Trades[resource] end
        elseif resource == state.trade.minus then
            self.UI.setAttribute(tid, 'color', 'red')
            self.UI.setValue(tid, Trades[resource])
            if state.trade.plus then state.post_trade[resource] = state.resources[resource] - Trades[resource] end
        else self.UI.setValue(tid, '') end end
        self.UI.setValue(rid, state.post_trade[resource])
    end
    updateTotals()
end

function updatePurchase(_, value, id)
    self.UI.setAttribute(id, 'text', value)
    if value == '' then value = 0 else value = value + 0 end
    local unit_type = string.match(id, '(%a+)%-')
    if unit_type == 'cg' then
        local total = 0
        state.production.cg[string.match(id, '%-(%a+)')] = value
        for k, val in pairs(state.production.cg) do
            if k != 'quantity' then total = total + val end
        end
        state.production.cg.quantity = math.floor(total / Costs.cg)
        setIntValue('cg-purchase', state.production.cg.quantity)
    else
        state.production[unit_type].quantity = value
        state.production[unit_type].osr = Costs[unit_type].osr * value
        setIntValue(unit_type .. '-osr', state.production[unit_type].osr)
        if unit_type != 'infantry' then
            state.production[unit_type].iron = Costs[unit_type].iron * value
            setIntValue(unit_type .. '-iron', state.production[unit_type].iron)
            if Nation ~= 'china' and unit_type != 'artillery' then
                state.production[unit_type].oil = Costs[unit_type].oil * value
                setIntValue(unit_type .. '-oil', state.production[unit_type].oil)
    end end end
    updateTotals()
end

function updateTotals()
    state.cost = {iron = 0, osr = 0}
    if Nation ~= 'china' then state.cost.oil = 0 end
    for unit_type, keys in pairs(state.production) do for resource, spent in pairs(keys) do
            if resource != 'quantity' then state.cost[resource] = state.cost[resource] + spent end
    end end
    for resource, total in pairs(state.cost) do
        state.remaining[resource] = state.post_trade[resource] - total
        setIntValue('cost-' .. resource, total)
        self.UI.setValue('remaining-' .. resource, state.remaining[resource])
        if state.remaining[resource] < 0 then
            self.UI.setAttribute('remaining-' .. resource, 'color', 'Red')
            self.UI.setAttribute('production-ready', 'interactable', false)
        else
            self.UI.setAttribute('remaining-' .. resource, 'color', 'Black')
            if self.UI.getAttribute('production-ready', 'interactable') == 'False' then self.UI.setAttribute('production-ready', 'interactable', true) end
        end
    end
end

function revealPurchases()
    for _, id in ipairs{'purchases', 'post_trade', 'remaining'} do self.UI.setAttribute(id, 'visibility', '') end
    self.UI.hide('production-ready')
    local purchases = {}
    for unit, t in pairs(state.production) do if t.quantity > 0 then purchases[unit] = t.quantity end end
    return purchases
end

function payPurchases()
    Resources.call('setResources', state.remaining)
    setProduction(true, true)
    if Nation ~= 'china' then for side, resource in pairs(state.trade) do
        toggleTrade(nil, 'False', side .. '-' .. resource)
    end end
end

-- INTERFACE FUNCTIONS --

function updateResources(data)
    state.resources = data
    for resource, value in pairs(data) do if resource ~= 'oil' or Nation ~= 'china' then
        self.UI.setValue('resources-' .. resource, value)
    end end
    updateTrade()
end

-- HELPER FUNCTIONS --

function getVis()
    if Alliance[Nation] == 'axis' then return 'White|Green|Orange|Black'
    else return 'Blue|Brown|Red|Yellow|Black' end
end

function getIntValue(id)
    local value = self.UI.getValue(id)
    if value == '' then return 0 else return value or 0 end
end

function setIntValue(id, value)
    if value == 0 then self.UI.setValue(id, '') else self.UI.setValue(id, value) end
end

state = {
    bid = 0,
    moves = {},
    resources = {oil = 0, iron = 0, osr = 0},
    trade = {},
    post_trade = {oil = 0, iron = 0, osr = 0},
    cost = {oil = 0, iron = 0, osr = 0},
    remaining = {oil = 0, iron = 0, osr = 0},
    production = {
        cg = {quantity = 0, oil = 0, iron = 0, osr = 0},
        infantry = {quantity = 0, oil = 0, iron = 0, osr = 0},
        artillery = {quantity = 0, oil = 0, iron = 0, osr = 0},
        armor = {quantity = 0, oil = 0, iron = 0, osr = 0},
        fighter = {quantity = 0, oil = 0, iron = 0, osr = 0},
        bomber = {quantity = 0, oil = 0, iron = 0, osr = 0},
        submarine = {quantity = 0, oil = 0, iron = 0, osr = 0},
        cruiser = {quantity = 0, oil = 0, iron = 0, osr = 0},
        carrier = {quantity = 0, oil = 0, iron = 0, osr = 0},
        battleship = {quantity = 0, oil = 0, iron = 0, osr = 0}
    }
}
Trades = {oil = 2, iron = 3, osr = 5}
