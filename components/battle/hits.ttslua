function Battle:assignHits(stage, side, roll, targets, fd)
    debug('=== Assigning ', side, ' ', stage, ' dice ===')
    debug(tostring(roll))
    fd = fd and stage ~= 'air'
    local sets, t = {}
    for _, die in ipairs(roll) do
        local value = die:getColor()
        if not t or value ~= t.color then
            t = {die, color = value, active = (value == 'black' or value == 'white') and not fd or targets[value]}
            table.insert(sets, t)
        else table.insert(t, die) end
        if not t.active then die.setColorTint(color(1, 1, 1, 0.4)) end
    end
    local pending, hit_unit, pos = {}
    for _, set in ipairs(sets) do if set.active then
        debug('Assigning ', #set, ' ', set.color, ' hits')
        local wild, white = set.color == 'black', set.color == 'white'
        local eligible, hp, autohit, escorts, cap_ships = 0, 0, false, false, false
        if targets.blue and targets.blue.escort then for stack, _ in pairs(targets.blue.escort.stacks) do
            if stack ~= 'casualty' then escorts = true break end
        end end
        for clr, stances in pairs(targets) do if white or wild or set.color == clr then
            hp = hp + stances.hp
            for label, stance in pairs(stances) do if label ~= 'hp' then
                if stance.stacks.damaged or stance.stacks.sustained or stance.stacks.damaged2 then
                    if not white or (not stance.stacks.sustained and label ~= 'dive') then eligible = eligible + 1 end
                    cap_ships = cap_ships or escorts and (clr == 'red' or clr == 'green')
                elseif not white then for stack, _ in pairs(stance.stacks) do if stack ~= 'casualty' and stack ~= 'escaped' then
                    eligible = eligible + 1 debug('Adding eligible ', stance.unit)
                    cap_ships = cap_ships or escorts and (clr == 'red' or clr == 'green')
        end end end end end end end
        if white then autohit = #set >= eligible else autohit = hp > 0 and #set >= hp end
        autohit = autohit and not cap_ships
        for _, die in ipairs(set) do if eligible > 0 then
            debug('Assigning ', set.color, ' hit, ', eligible, ' targets remaining', autohit and ' (autohit active)' or '')
            local buttons, hit = {}
            for clr, stances in pairs(targets) do if white and not bombing or wild or clr == set.color then
                for label, stance in pairs(stances) do
                    if label ~= 'hp' then
                        local priority = nil
                        for stack, _ in pairs(stance.stacks) do if stack:match('[^p]ed2?$') then priority = stack break end end
                        if priority and (not white or label ~= 'dive' and priority ~= 'sustained') then
                            if not autohit and eligible > 1 then table.insert(buttons, stance.stacks[priority]) debug('Eligible target: ', priority, ' ', stance.unit, ' in ', label, ' stance')
                            else hit = {color = clr, stance = label, stack = priority, unit = stance.stacks[priority]} break end
                        elseif not white then
                            if autohit or eligible == 1 then
                                hit = {color = clr, stance = label}
                                repeat hit.stack, hit.unit = next(stance.stacks, hit.stack) until hit.stack ~= 'casualty'
                            else for stack, unit in pairs(stance.stacks) do
                                if stack ~= 'casualty' then table.insert(buttons, unit) debug('Eligible target: ', stack, ' ', stance.unit, ' in ', label, ' stance') end
                    end end end end
                    if hit and hit.stack then
                        self.UI.setAttributes(side .. '-confirm', {text = 'Assigning hits', textColor = 'white'})
                        break
                end end
                if hit then break end
            end end
            if hit_unit and (not hit or hit_unit.guid ~= hit.unit.guid) then
                self:moveHitUnit(hit_unit, pos, pending)
                hit_unit = nil
            end
            hit = hit or self:getHitAssignment(die, buttons, side, bombing)
            local stance = targets[hit.color][hit.stance]
            local unit, casualty = hit.unit or stance.stacks[hit.stack]
            debug('Hit', hit.unit and ' auto-' or ' ', 'assigned to ', hit.stack, ' ', stance.unit, ' in ', hit.stance, ' stance')
            if targets.blue and targets.blue.escort and (stance.unit == 'carrier' or stance.unit == 'battleship') then
                local escorts = {}
                for stack, unit in pairs(targets.blue.escort.stacks) do if stack == 'damaged' then
                    escorts = {unit} break
                elseif stack ~= 'casualty' then table.insert(escorts, unit) end end
                if #escorts > 0 then
                    if hit_unit then
                        self:moveHitUnit(hit_unit, pos, pending)
                        hit_unit = nil
                    end
                    hit = self:getEscortAssignment(die, unit, escorts, side)
                    stance = targets[hit.color][hit.stance]
                    unit = stance.stacks[hit.stack]
                    debug('Hit assigned to ', hit.stack, ' ', stance.unit, ' in ', hit.stance, ' stance')
            end end
            if unit.UI.getAttribute('hit', 'active') == 'true' then
                Wait.condition(|| self.combat.resume(), || unit.UI.getAttribute('hit', 'active') == 'false')
                coroutine.yield()
            end
            local escorted = hit.stance == 'escort' and (set.color == 'red' or set.color == 'green')
            table.insert(pending, die)
            if targets[hit.color].hp == 1 then targets[hit.color] = nil
            else targets[hit.color].hp = targets[hit.color].hp - 1 end
            stance.stacks[hit.stack], unit.next = rawget(unit, 'next'), nil
            if stance.stacks[hit.stack] then
                local xml, next_unit = unit.UI.getXmlTable(), stance.stacks[hit.stack]
                if next_unit.getName() ~= unit.getName() then
                    xml[1].attributes.colors = table.concat({Color.cfighter:lerp(Color.white, 0.3):toXml(), 'white', Color.cfighter:toXml(), 'clear'}, '|')
                    for _, tag in ipairs(xml) do
                        tag.attributes.scale = '2 2'
                        tag.attributes.position = '0 0 ' .. (next_unit.is_face_down and 2 or -29)
                        tag.attributes.rotation = '0 ' .. math.round(next_unit.getRotation().z) .. ' ' .. math.round(next_unit.getRotation().y)
                end end
                next_unit.UI.setXmlTable(xml)
            end
            if hit.stack:match('damaged') then casualty, eligible = true, eligible - (escorted and 0 or 1)
            elseif hit.stack == 'sustained' then
                unit.UI.setAttribute('hit', 'onClick', unit.UI.getAttribute('hit', 'onClick'):gsub('%a+%)', 'damaged2)'))
                stance.stacks.damaged2, pos = unit, stance.snaps.damaged2.position
            elseif stance.hp > 1 then
                local next_stack = stance.hp > 2 and 'sustained' or 'damaged'
                unit.UI.setAttribute('hit', 'onClick', unit.UI.getAttribute('hit', 'onClick'):gsub('%a+%)', next_stack .. ')'))
                stance.stacks[next_stack], pos = unit, stance.snaps[next_stack].position
                if not escorted then for stack, _ in pairs(stance.stacks) do
                    if stack ~= hit.stack and Nations[stack] then eligible = eligible - 1 end
                end end
            else casualty, eligible = true, eligible - 1 end
            if casualty then
                debug('Unit is eliminated')
                if not white and not escorted then for stack, _ in pairs(stance.stacks) do
                    if Nations[stack] then eligible = eligible + 1 end
                end end
                unit:clearUI()
                unit.addTag('casualty')
                unit.next, stance.stacks.casualty = stance.stacks.casualty, unit
                if rawget(unit, 'next') == nil then pos = stance.snaps.casualty.position
                else pos = self.positionToLocal(unit.next.getPosition() + vector(0, unit.next.is_face_down and 0 or 0.21, 0)) end
                self:moveHitUnit(unit, pos, pending)
                hit_unit = nil
            else hit_unit = unit end
        else die.destruct() end end
    else for _, die in ipairs(set) do die.destruct() end end end
    if hit_unit then self:moveHitUnit(hit_unit, pos, pending) end
    if stage == 'surface' and targets.yellow then
        local stance = targets.yellow.dive
        local sub = stance.stacks.damaged
        if sub then
            debug('Submarine diving to escape')
            if targets.yellow.hp == 1 then targets.yellow = nil
            else targets.yellow.hp = targets.yellow.hp - 1 end
            sub.next, stance.stacks.escaped, stance.stacks.damaged = stance.stacks.escaped, sub, nil
            pos = stance.snaps.escaped.position
            if rawget(sub, 'next') then pos = self.positionToLocal(sub.next.getPosition() + vector(0, 0.21, 0)) end
            sub.addTag('escaped')
            sub:clearUI()
            sub.setRotationSmooth(stance.snaps.escaped.rotation + self.getRotation())
            self:moveHitUnit(sub, pos, {})
    end end
end

function Battle:getHitAssignment(die, buttons, side)
    debug('Showing hit buttons')
    local player, hit
    for _, unit in ipairs(buttons) do
        setGlow(unit)
        unit.UI.show('hit')
    end
    setGlow(die)
    self.UI.setAttributes(side .. '-confirm', {text = 'Assign hit', textColor = 'white'})
    repeat player, hit = coroutine.yield() debug(player.color, ' clicked ', tostring(hit)) until Vis[side]:match(player.color)
    for _, unit in ipairs(buttons) do
        stopGlow(unit)
        unit.UI.hide('hit')
    end
    stopGlow(die)
    return hit
end

function Battle:getEscortAssignment(die, unit, escorts, side)
    local other = Nations.other[side]
    local unit_color, escort_color = unit.UI.getAttribute('hit', 'colors'), escorts[1].UI.getAttribute('hit', 'colors')
    for _, escort in ipairs(escorts) do escort.UI.setAttribute('hit', 'colors', unit_color) end
    unit.highlightOn(Color.white)
    self.UI.hide(side .. '-confirm-panel')
    self.UI.show(other .. '-confirm-panel')
    local hit = self:getHitAssignment(die, {unit, table.unpack(escorts)}, other)
    for _, escort in ipairs(escorts) do escort.UI.setAttribute('hit', 'colors', escort_color) end
    unit.highlightOff()
    self.UI.show(side .. '-confirm-panel')
    self.UI.hide(other .. '-confirm-panel')
    return hit
end

function Battle:moveHitUnit(unit, pos, dice)
    while #dice > 0 do fadeOut(table.remove(dice)) end
    unit.setLock(false)
    unit.setPositionSmooth(self.positionToWorld(pos) + vector(0, unit.is_face_down and 0.21 or 0, 0))
    Wait.condition(function ()
        Wait.frames(|| unit.setLock(true), 5)
        self.combat.resume()
    end, || not unit.isSmoothMoving())
    coroutine.yield()
end
