function Battle.diceHandler(zone, obj, value)
    if Battle.left.zones_active and Battle.left.zones[zone.guid] then
        Battle.left:updateDice(zone, obj, value)
    elseif Battle.right.zones_active and Battle.right.zones[zone.guid] then
        Battle.right:updateDice(zone, obj, value)
    end
end

function Battle:initialize(guids)
    self.bags = {}
    for side, guid in pairs(guids.dice) do self.bags[side] = Dice(getObjectFromGUID(guid)) end
    self:setupZones(guids.zones)
    self:loadUI()
    self.RepairAssets = {}
    for _, asset in ipairs(UI.getCustomAssets()) do
        if Nations[asset.name] or asset.name:match('[io][irs][lor]n?') then
            table.insert(self.RepairAssets, asset)
    end end
    return self
end

function Battle:setupZones(guids)
    log('Initializing battle zones')
    self.commands = Battle.Zone(getObjectFromGUID(guids.commands), {z = 0.178})
    self.commands.setTags({'command'})
    self.zones, self.casualties = {[guids.commands] = self.commands}, {}
    for side, guid in pairs(guids.casualties) do
        self.casualties[side] = Battle.Zone(getObjectFromGUID(guid), {z = 0.01})
        self.zones[guid] = self.casualties[side]
    end
    self.stances = {land = {}, sea = {}}
    for mode, t in pairs(self.stances) do
        local y = mode == 'land' and 0.2 or 0
        for side, zones in pairs(guids.units) do
            local active, snaps, i = self:mode() == mode, Battle.Snaps[mode][side], 1
            local flat, tilt = vector(0, 0, mode == 'land' and 0 or -180), vector(0, 33 * (side == 'axis' and 1 or -1), 0)
            if active then
                local v = self.positionToLocal(self.commands.getPosition()):setAt('y', y)
                for nation, x in pairs(snaps.nations) do
                    self.commands.snaps[nation] = {position = v:copy():setAt('x', x), rotation = mode == 'sea' and flat + tilt or flat}
            end end
            t[side] = {}
            setmetatable(t[side], {__index = {x = side == 'axis' and -0.008 or 0.011}})
            for u, unit in ipairs(Battle.Stance.Order[mode]) do
                local name, rotation = unit[1], mode == 'sea' and u < 5 and flat + tilt or flat
                t[side][name] = {}
                for _, stance in ipairs(unit[2]) do
                    local zone = Battle.Stance(getObjectFromGUID(zones[i]), Units[name].stances[stance])
                    if active then zone.setTags({name}) end
                    zone.side, zone.unit = side, name
                    local z, xs = self.positionToLocal(zone.getPosition()).z - (active and 0 or zone.z), {casualty = snaps.casualty}
                    for nation, x in pairs(snaps.nations) do if nation ~= 'china' or u < 3 then xs[nation] = x end end
                    if zone.hp == 3 then xs.sustained, xs.damaged2 = snaps.sustained, snaps.damaged2
                    elseif zone.hp == 2 then xs.damaged = snaps.damaged end
                    for label, x in pairs(xs) do zone.snaps[label] = {position = vector(x, y, z), rotation = rotation} end
                    if name == 'submarine' then zone.snaps.escaped = {position = vector(side == 'axis' and -1.275 or 1.27, y, -0.365), rotation = flat} end
                    if active then self.zones[zones[i]] = zone end
                    t[side][name][stance], i = zone, i + 1
    end end end end
end

Battle.Zone = {}
setmetatable(Battle.Zone, {__call = function (T, obj, z)
    z = z or {}
    z.obj, z.snaps = obj, {}
    setmetatable(z, {__index = |t, k| T[k] or t.obj[k]})
    return z
end})

Battle.Stance = {}
Battle.Stance.Order = {land = {
    {'infantry', {'offensive', 'defensive'}},
    {'artillery', {'ground', 'antiair'}},
    {'armor', {'offensive', 'defensive'}},
    {'fighter', {'ground', 'air'}},
    {'bomber', {'ground', 'strategic'}}
}, sea = {
    {'submarine', {'dive'}},
    {'cruiser', {'offensive', 'escort'}},
    {'carrier', {'offensive', 'antiair'}},
    {'battleship', {'offensive', 'antiair'}},
    {'fighter', {'surface', 'guard'}},
    {'bomber', {'surface'}}
}}
setmetatable(Battle.Stance, {__call = function (T, zone, params)
    local t, z = {}, Battle.Zone(zone)
    setmetatable(t, {__index = |_, k| params[k] or T[k] or z[k]})
    return t
end})

function Battle.Stance:getUnits()
    self.units = self.getObjects()
    return self.units
end

Battle.Snaps = {land = {
    axis = {sustained = 0.88, damaged = 1.035, damaged2 = 1.085, casualty = 1.29, nations = {
        italy = 0.325, japan = 0.515, germany = 0.69,
    }},
    allies = {sustained = -0.87, damaged = -1.025, damaged2 = -1.075, casualty = -1.285, nations = {
        uk = -0.3, ussr = -0.465, usa = -0.63, china = -0.8
    }}
}, sea = {
    axis = {sustained = -0.89, damaged = -1.035, damaged2 = -1.085, casualty = -1.29, nations = {
        italy = -0.335, japan = -0.525, germany = -0.705,
    }},
    allies = {sustained = 0.885, damaged = 1.025, damaged2 = 1.08, casualty = 1.285, nations = {
        uk = 0.34, ussr = 0.52, usa = 0.7
    }}
}}
