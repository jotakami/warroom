Morale = {Zones = {
    {name = 'White', label = 'Acceptable Stress', color = 'fbfcfc'},
    {name = 'Blue', label = 'Labor and Civil Unrest', color = 'aed6f1'},
    {name = 'Yellow', label = 'Dysfunctional Infrastructure', color = 'f7dc6f'},
    {name = 'Orange', label = 'Supply Lines Disrupted', color = 'e59866'},
    {name = 'Red', label = 'Economic Collapse', color = 'f1948a'},
    {name = 'Grey', label = 'Mass Desertions', color = 'abb2b9'}
}}

function Morale:initialize(board, scenario)
    setmetatable(getmetatable(self).__index, {__index = board})
    self.stacks, self.stress, self.medals, self.snaps = {}, {}, {}, {}
    local origin, flip = self.getPosition(), scenario ~= 'global' and scenario ~= 'eastern' and not self.is_face_down
    local snaps, nations, nation, unit = self.getSnapPoints(), Nations:moraleOrder()
    for i, snap in ipairs(snaps) do
        if (i - 1) % 11 == 0 then
            nation = table.remove(nations)
            self.snaps[nation], unit = {}, 'medal_goods'
        elseif unit ~= 'medal_goods' then
            unit = next(Units, unit ~= 'stress' and unit:gsub('fighter', 'c%0') or nil)
        else unit = 'stress' end
        if flip then snap.position, snap.rotation.z = snap.position:rotateOver('z', 180) + vector(0, 0.2, 0), (snap.rotation.z + 180) % 360 end
        self.snaps[nation][unit] = snap.position
    end
    if flip then
        self.setLock(false)
        self.flip()
        self.setSnapPoints(snaps)
        Wait.condition(|| self.setLock(true), || self.resting)
    end
    self:loadUI(scenario)
    log('Morale board initialized')
end

#include ../ui/morale

function Morale:casualties(units)
    debug('Stacking casualties on the morale board')
    if not rawget(units, 1) then units = {units} end
    local ps, casualties = {}, {}
    while #units > 0 do
        local unit = table.remove(units)
        local name = unit.getName():gsub('cfighter', 'fighter')
        casualties[unit.nation] = casualties[unit.nation] or {}
        casualties[unit.nation][name] = casualties[unit.nation][name] or {}
        table.insert(casualties[unit.nation][name], unit)
        self.stacks[unit.nation] = self.stacks[unit.nation] or {}
    end
    for nation, names in pairs(casualties) do for name, units in pairs(names) do
        debug('Stacking ', #units, ' ', nation, ' ', name, ' casualties')
        self.stacks[nation][name] = self:stackUnits(nation, name, units)
        table.insert(ps, self.stacks[nation][name])
    end end
    return Promise.all(ps)
end

function Morale:sunkConvoys(nation, value)
    debug('Stacking ', value, ' convoy tokens on the morale board')
    local units = {}
    for _ = 1, value do table.insert(units, 'convoy_dive') end
    self.stacks[nation] = self.stacks[nation] or {}
    self.stacks[nation].submarine = self:stackUnits(nation, 'submarine', units)
    return self.stacks[nation].submarine
end

function Morale:stackUnits(nation, name, units)
    local p = self.stacks[nation][name]
    if not p then
        local stack = self:getStack(nation, name)
        p = Promise():resolve(#stack > 0
            and table.remove(stack).getPosition() + vector(0, 0.21, 0)
            or self.positionToWorld(self.snaps[nation][name]))
    end
    return p:next(function (pos)
        local q = Promise()
        for i, unit in ipairs(units) do Wait.frames(function ()
            if type(unit) ~= 'string' then
                unit.setPositionSmooth(pos + vector(0, unit.is_face_down and 0.21 or 0, 0))
                unit.setRotationSmooth(unit.getRotation():setAt('x', 0):setAt('y', self.getRotation().y))
                if i == #units then Wait.condition(|| q:resolve(pos), || not unit.isSmoothMoving()) end
            else Bags[unit].takeObject({
                position = pos, rotation = vector(0, self.getRotation().y, 0),
                callback_function = i == #units and (|| q:resolve(pos)) or nil
            }) end
            pos = pos + vector(0, 0.21, 0)
        end, i * 5 - 4) end
        return q
    end)
end

function Morale:getStack(nation, name)
    local objs = {}
    for _, obj in ipairs(Physics.cast({
        origin = self.positionToWorld(self.snaps[nation][name]) - vector(0, 0.1, 0), direction = {0, 1, 0}, max_distance = 5
    })) do if not obj.hit_object.isSmoothMoving() and (obj.hit_object.getName():match(name)
            or name == 'submarine' and obj.hit_object.getName() == 'convoy_dive') then
        table.insert(objs, obj.hit_object)
    end end
    table.sort(objs, function (a, b)
        return a.getPosition().y + a.getBounds().size.y * (a.is_face_down and -0.5 or 0.5)
            < b.getPosition().y + b.getBounds().size.y * (b.is_face_down and -0.5 or 0.5)
    end)
    debug('Found ', #objs, ' ', nation, ' ', name)
    return objs
end

function Morale:addGoods(nation, value) self:addMedals(nation, value, true) end
function Morale:addMedals(nation, value, is_goods)
    debug('Giving ', value, ' ', is_goods and 'consumer goods' or 'medals', ' to ', nation)
    if not is_goods then alert(string.format('%s was awarded %s medal',
        Nations[nation]:colorized(), string.colorize(value, 'medal')) .. (value > 1 and 's' or '')) end
    if not self.medals[nation] or coroutine.status(self.medals[nation]) == 'dead' then
        self.medals[nation] = coroutine.create(function (stack, remaining) repeat
            remaining = remaining - 1
            Bags.medal_goods.takeObject({
                position = self.positionToWorld(self.snaps[nation].medal_goods) + vector(0, 2.5, 0),
                rotation = vector(0, self.getRotation().y, is_goods and 180 or 0),
                callback_function = function (obj)
                    obj.addTag(nation)
                    obj.registerCollisions()
            end})
            repeat
                value = coroutine.yield()
                if value then remaining = remaining + value end
            until value == nil
        until remaining == 0 end)
        coroutine.resume(self.medals[nation], self:getStack(nation, 'medal_goods'), value)
    else coroutine.resume(self.medals[nation], value) end
end

function Morale:addStress(nation, value)
    debug('Giving ', value, ' stress to ', nation)
    if not self.stress[nation] or coroutine.status(self.stress[nation]) == 'dead' then
        self.stress[nation] = coroutine.create(function (stack, remaining) repeat
            local size, value, first, second = 1, 1
            for i, obj in ipairs(stack) do if obj.getName():match('1') then
                first, second = first or i, first and i
                if first and second then
                    fadeOut(table.remove(stack, second), 0.5)
                    fadeOut(table.remove(stack, first), 0.5)
                    size = 3 break
            end end end
            if not first and remaining > 2 then size, value = 3, 3 end
            debug('Stacking ', value, ' stress on ', nation)
            remaining = remaining - value
            table.insert(stack, Bags.stress[size].takeObject({
                position = self.positionToWorld(self.snaps[nation].stress) + vector(0, 2.5, 0),
                rotation = vector(0, self.getRotation().y, 0),
                callback_function = function (obj)
                    obj.addTag(nation)
                    obj.registerCollisions()
            end}))
            repeat
                value = coroutine.yield()
                if value then debug('Added an additional ', value, ' stress to ', nation) remaining = remaining + value end
            until value == nil
            debug('Stress token landed on ', nation, ' stack')
        until remaining == 0 end)
        coroutine.resume(self.stress[nation], self:getStack(nation, 'stress'), value)
    else debug('Adding stress to ', nation, ' coroutine') coroutine.resume(self.stress[nation], value) end
end

function Morale:removeStress(stress, total)
    local ps = {}
    while total > 0 do
        local obj = table.remove(stress)
        local value, p, pos = tonumber(obj.getName():match('%d')), fadeOut(obj), obj.getPosition()
        for i = 1, value - total do p = p:next(function () table.insert(stress, Bags.stress[1].takeObject({
            position = pos + vector(0, 0.21 * (i - 1), 0), rotation = {0, 180, 0}, smooth = false
        })) end) end
        table.insert(ps, p)
        total = total - value
    end
    return Promise.all(ps)
end

function Morale:collisionHandler(obj, collider)
    for _, label in ipairs{'medal', 'stres'} do if obj.getName():match(label) then
        if (collider.getName():match(label) or collider.guid == self.guid) then
            for nation, co in pairs(self[label .. 's']) do if obj.hasTag(nation) then
                obj.unregisterCollisions()
                obj.removeTag(nation)
                coroutine.resume(co)
                break
    end end end end end
end

function Morale.stressZone(nation)
    local angle = Map:rotationToCenter(Map.positionToLocal(Tokens.homeland[nation].getPosition()))
    if angle > 276.25 then return 6 else return math.floor((angle - 0.5) / 45) end
end

function Morale.updateZone(nation, delta)
    debug('Updating stress zone for ', nation)
    local token = Tokens.homeland[nation]
    local pos, snap_index = Map.positionToLocal(token.getPosition())
    for i, snap in ipairs(Map.snaps) do if pos == snap.position then snap_index = i + 7 * delta break end end
    token.setPositionSmooth(Map.positionToWorld(Map.snaps[snap_index].position))
    token.setRotationSmooth(Map.snaps[snap_index].rotation + Map.rotation)
    local zone = Morale.Zones[math.floor((snap_index - 1) / 7)]
    alert(string.format('%s has %s to the %s', Nations[nation]:colorized(),
        delta > 0 and 'advanced' or 'recovered', string.colorize(zone.name .. ' Zone', Color.fromHex(zone.color))))
    return Promise.condition(|| not token.isSmoothMoving())
end
