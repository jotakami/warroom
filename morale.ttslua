#include debug

function onLoad(saved_state)
    Zones = {}
    for nation, guid in pairs(Global.getTable('GUIDs').MoraleZones) do
        Zones[nation] = getObjectFromGUID(guid)
    end
    local bag_guids = Global.getTable('GUIDs').Bags
    Bags = {
        Stress = {getObjectFromGUID(bag_guids.Stress[1]), nil, getObjectFromGUID(bag_guids.Stress[3])},
        MedalGoods = getObjectFromGUID(bag_guids.medal_goods)
    }
    state = {pending = {}, stress = {}, medals = {}}
    for nation, _ in pairs(Nations) do
        state.pending[nation] = {casualties = {}, stress = 0, medals = 0}
    end
end

function stackCasualties(data)
    for _, guid in ipairs(data) do
        local obj = getObjectFromGUID(guid)
        local unit = obj.getName()
        addCasualty(obj, obj.getVar('nation'), unit == 'cfighter' and 'fighter' or unit)
        obj.setVar('nation', nil)
    end
end

function addCasualty(obj, nation, unit)
    if not state.pending[nation].casualties[unit] then state.pending[nation].casualties[unit] = {} end
    local casualties = state.pending[nation].casualties[unit]
    table.insert(casualties, obj)
    if #casualties == 1 then stackCasualty(casualties, getDropPosition(nation, unit)) end
end

function stackCasualty(casualties, pos)
    if #casualties > 0 then
        local obj, offset, step = casualties[1], vector(0, 0, 0), 0.21
        if obj.getName() == 'cfighter' then step = 0.22 end
        if obj.is_face_down then offset = vector(0, step, 0) end
        obj.setPositionSmooth(pos + offset)
        obj.setRotationSmooth(self.getRotation() + vector(0, 0, obj.is_face_down and 180 or 0))
        Wait.frames(function ()
            table.remove(casualties, 1)
            stackCasualty(casualties, pos + vector(0, step, 0))
        end, 5)
    end
end

function getDropPosition(nation, unit)
    local pos, offset = self.positionToWorld(self.getSnapPoints()[snapOffset(nation, unit)].position) - vector(0, 0.1, 0), 0.15
    for _, obj in ipairs(Physics.cast({
        origin = pos,
        direction = {0, 1, 0},
        max_distance = 5
    })) do if obj.hit_object.getName() == 'cfighter' then offset = offset + 0.22 else offset = offset + 0.21 end end
    return pos + vector(0, offset, 0)
end

function getMedals(data)
    local medals = {}
    for _, obj in ipairs(Zones[data.nation].getObjects()) do
        if obj.getName() == 'medal_goods' then table.insert(medals, obj) end
    end
    table.sort(medals, function (a, b)
        local ay, by = a.getPosition().y, b.getPosition().y
        if a.is_face_down then ay = ay - a.getCustomObject().thickness end
        if b.is_face_down then by = by - b.getCustomObject().thickness end
        return ay < by
    end)
    return medals
end

function addMedals(data)
    debug('Giving ', data.value, ' ', data.goods and 'consumer goods' or 'medals', ' to ', data.nation)
    state.pending[data.nation].medals = state.pending[data.nation].medals + data.value
    if state.pending[data.nation].medals == data.value then
        local medal, position = table.remove(getMedals({nation = data.nation}))
        if medal then
            position = medal.getPosition()
            if medal.is_face_down then position = position - vector(0, 0.21, 0) end
        else position = self.positionToWorld(self.getSnapPoints()[snapOffset(data.nation, 'medal_goods')].position) end
        stackMedals(data.nation, position + vector(0, 2, 0), data.goods)
    end
end

function addGoods(data) addMedals({nation = data.nation, value = data.value, goods = true}) end

function stackMedals(nation, position, flipped)
    if state.pending[nation].medals > 0 then
        state.pending[nation].medals = state.pending[nation].medals - 1
        Bags.MedalGoods.takeObject({
            position = position + vector(0, flipped and 0.21 or 0, 0),
            rotation = self.getRotation() + vector(0, 0, flipped and 180 or 0),
            callback_function = || stackMedals(nation, position + vector(0, 0.21, 0), flipped)
        })
    end
end

function getStress(data)
    local stress = {total = 0, objs = {}}
    for _, obj in ipairs(Zones[data.nation].getObjects()) do if not obj.isSmoothMoving() then
        if obj.getName() == '1stress' then
            stress.total = stress.total + 1
            table.insert(stress.objs, obj)
        elseif obj.getName() == '3stress' then
            stress.total = stress.total + 3
            table.insert(stress.objs, obj)
    end end end
    table.sort(stress.objs, function (a, b)
        local ay, by = a.getPosition().y, b.getPosition().y
        if a.is_face_down then ay = ay - a.getCustomObject().thickness end
        if b.is_face_down then by = by - b.getCustomObject().thickness end
        return ay < by
    end)
    return stress
end

function addStress(data)
    debug('Giving ', data.value, ' stress to ', data.nation)
    state.pending[data.nation].stress = state.pending[data.nation].stress + data.value
    if state.pending[data.nation].stress == data.value then
        local stress, singles, position = getStress(data), {}
        if #stress.objs == 0 then position = self.positionToWorld(self.getSnapPoints()[snapOffset(data.nation, 'stress')].position)
        else position = stress.objs[#stress.objs].getPosition() end
        if stress.total % 3 == 1 then singles = {stress.objs[#stress.objs]}
        elseif stress.total % 3 == 2 then singles = {stress.objs[#stress.objs - 1], stress.objs[#stress.objs]} end
        stackStress(data.nation, position + vector(0, 2, 0), singles)
    end
end

function stackStress(nation, position, singles)
    if state.pending[nation].stress > 0 then if #singles == 2 then Bags.Stress[1].takeObject({
        position = position, rotation = self.getRotation(),
        callback_function = placedCallback(function (obj)
            local pos = singles[2].getPosition()
            for _, o in pairs({obj, singles[2], singles[1]}) do destroyObject(o) end
            Bags.Stress[3].takeObject({position = pos, rotation = self.getRotation(), smooth = false})
            state.pending[nation].stress = state.pending[nation].stress - 1
            stackStress(nation, position - vector(0, 0.21, 0), {})
        end)
    })
    elseif #singles == 1 then placeStress(nation, 1, position, singles[1])
    elseif state.pending[nation].stress < 3 then placeStress(nation, 1, position)
    else placeStress(nation, 3, position) end end
end

function placeStress(nation, value, position, single)
    Bags.Stress[value].takeObject({
        position = position, rotation = self.getRotation(),
        callback_function = placedCallback(function (obj)
            local singles = {single}
            if value == 1 then table.insert(singles, obj) end
            state.pending[nation].stress = state.pending[nation].stress - value
            stackStress(nation, position + vector(0, 0.21, 0), singles)
        end)
    })
end

function placedCallback(callback)
    return |obj| Wait.condition(|| Wait.condition(|| callback(obj), || obj.getVelocity().y > -0.1), || obj.getVelocity().y < -0.1)
end

function convertCasualties()
    local ready = {}
    self.UI.hide('convert-button')
    self.UI.show('stress-levels')
    self.UI.show('casualties')
    for nation, _ in pairs(Nations) do
        ready[nation] = false
        self.UI.setValue(string.lower(nation) .. '-casualties', 0)
        self.UI.setAttribute(string.lower(nation) .. '-stress', 'image', 'stress-level0')
        countCasualties(nation, {total = 0, objs = sortCasualties(nation)}, 1, ready)
    end
    Wait.condition(|| self.UI.show('spend-button'), function ()
        for _, flag in pairs(ready) do if not flag then return false end end
        return true
    end)
end

function sortCasualties(nation)
    local units, name = {}
    for _, obj in ipairs(Zones[nation].getObjects()) do
        name = obj.getName()
        if name != 'medal_goods' and name != '1stress' and name != '3stress' then
            table.insert(units, obj)
    end end
    table.sort(units, function (a, b)
        if Spots[a.getName()] == Spots[b.getName()] then return a.getPosition()[2] > b.getPosition()[2]
        else return Spots[a.getName()] < Spots[b.getName()] end
    end)
    return units
end

function countCasualties(nation, casualties, i, ready)
    local obj, prev_total = casualties.objs[i], casualties.total
    if obj then
        casualties.total = casualties.total + Values[obj.getName()]
        destroyObject(obj)
        updateTotal(nation, casualties.total, prev_total)
        Wait.time(|| countCasualties(nation, casualties, i + 1, ready), 0.2)
    else
        ready[nation] = true
        announceCasualtyStress(nation, casualties.total)
    end
end

function announceCasualtyStress(nation, total)
    local level, shade
    for i, threshold in ipairs(Levels) do
        if total >= threshold then
            level = i - 1
            shade = Shades[i]
    end end
    broadcastToAll(nation .. ' took [' .. shade .. ']' .. level .. '[-] stress from casualties')
end

function updateTotal(nation, total, prev_total)
    local level, prev_level
    for i, threshold in ipairs(Levels) do
        if total >= threshold then level = i - 1 end
        if prev_total >= threshold then prev_level = i - 1 end
    end
    self.UI.setValue(string.lower(nation) .. '-casualties', total)
    if level > prev_level then
        self.UI.setAttribute(string.lower(nation) .. '-stress', 'image', 'stress-level' .. level)
        addStress({nation = nation, value = level - prev_level})
    end
end

function spendMedals()
    self.UI.hide('spend-button')
    self.UI.hide('stress-levels')
    self.UI.hide('casualties')
    self.UI.show('evaluate-button')
    self.UI.show('threshold-bg')
    self.UI.show('thresholds')
    for nation, _ in pairs(Nations) do
        state.stress[nation], state.medals[nation] = getStress({nation = nation}), getMedals({nation = nation})
        updateThreshold(nation)
        updateSpendButton(nation)
    end
end

function spendMedal(_, _, nation)
    debug(nation, ' spent a medal/goods')
    local medal = table.remove(state.medals[nation])
    medal.UI.setXml('')
    medal.destruct()
    state.stress[nation].total = state.stress[nation].total - 1
    updateThreshold(nation)
    fadeOut(table.remove(state.stress[nation].objs), function (obj)
        if obj.getName():find('3') then makeChange(obj, 2) else obj.destruct() end
        updateSpendButton(nation)
    end)
end

function updateThreshold(nation)
    local id, value, color = nation .. '-threshold', state.stress[nation].total
    self.UI.setValue(id, value == 0 and '' or value .. '/')
    if value >= Thresholds[self.getStateId()][nation] then color = '#ff8040' else color = '#ffffff' end
    self.UI.setAttribute(id, 'color', color)
end

function updateSpendButton(nation)
    local count = #state.medals[nation]
    if count > 0 and state.stress[nation].total > 0 then
        local top = state.medals[nation][count]
        local cg = top.is_face_down
        top.UI.setXmlTable({{tag = 'Button', attributes = {
            height = 75, width = 150,
            position = '0 0 ' .. (cg and '1' or '-24'),
            rotation = '0 ' .. (cg and '180' or '0') .. ' 180',
            text = 'Spend', fontSize = 40, fontStyle = "Bold",
            colors = (cg and 'green|teal' or 'orange|yellow') .. '|white|clear',
            id = nation, onClick = self.getGUID() .. '/spendMedal'
        }}})
    end
end

function evaluateStress()
    self.UI.hide('evaluate-button')
    self.UI.hide('threshold-bg')
    self.UI.hide('thresholds')
    local order, i = {'japan', 'italy', 'germany', 'usa', 'ussr', 'uk', 'china'}, 1
    Wait.time(function ()
        local nation = order[i]
        i = i + 1
        convertStress(nation)
    end, 0.25, 7)
end

function convertStress(nation)
    local stress, threshold = getStress({nation = nation}), Thresholds[self.is_face_down and 2 or 1][nation]
    local count, remaining, delta = #stress.objs, threshold * 5, 5
    while stress.total < remaining do remaining, delta = remaining - threshold, delta - 1 end
    while remaining > 0 do
        local obj = stress.objs[count]
        count = count - 1
        if obj.getName() == '1stress' then
            remaining = remaining - 1
            fadeOut(obj)
        else
            remaining = remaining - 3
            if remaining < 0 then fadeOut(obj, |obj| makeChange(obj, -remaining))
            else fadeOut(obj) end
    end end
    if delta > 0 then Global.call('updateStressZone', {nation, delta}) end
end

function makeChange(obj, remaining)
    local params = {position = obj.getPosition(), rotation = {0, 180, 0}, smooth = false}
    local params2 = {
        position = params.position + obj.getTransformUp() * obj.getCustomObject().thickness * 1.1,
        rotation = {0, 180, 0},
        smooth = false
    }
    obj.destruct()
    Bags.Stress[1].takeObject(params)
    if remaining == 2 then Bags.Stress[1].takeObject(params2) end
end

function fadeOut(obj, callback)
    callback = callback or |obj| obj.destruct()
    obj.UI.setXml('<Panel id="shade" height="200" width="200" position="0 0 -21" color="rgba(0.4,0.2,0,0)" />')
    Wait.time(function () if obj.getColorTint().b < 0.1 then callback(obj) else darken(obj) end end, 0.1, 10)
end

function darken(obj)
    local tint = obj.getColorTint()
    local color, a = obj.UI.getAttribute('shade', 'color')
    if color then
        color, a = color:match('(.+),(%d%.?%d*)%)$')
        obj.UI.setAttribute('shade', 'color', color .. ',' .. (a + 0.09) .. ')')
    end
    tint.r = tint.r - 0.05
    tint.g = tint.g - 0.08
    tint.b = tint.b - 0.1
    obj.setColorTint(tint)
end

function snapOffset(nation, spot) return 1 + Nations[nation] * 11 + Spots[spot] end

Nations = {japan = 0, italy = 1, germany = 2, usa = 3, ussr = 4, uk = 5, china = 6}
Spots = {medal_goods = 0, stress = 1, infantry = 2, artillery = 3, armor = 4, fighter = 5,
        cfighter = 5, bomber = 6, submarine = 7, cruiser = 8, carrier = 9, battleship = 10}
Values = {infantry = 2, artillery = 2, armor = 4, fighter = 4, cfighter = 4,
        bomber = 6, submarine = 6, cruiser = 10, carrier = 20, battleship = 20}
Levels = {0, 20, 36, 52, 70, 90}
Shades = {'ffffff', 'ffff80', 'e0c040', 'c08000', 'c02000', '800000'}
Thresholds = {
    {japan = 7, italy = 4, germany = 6, usa = 5, ussr = 6, uk = 6, china = 4},
    {japan = 6, italy = 4, germany = 6, usa = 5, ussr = 6, uk = 4, china = 4},
}
